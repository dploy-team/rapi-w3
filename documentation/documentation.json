{
    "pipes": [
        {
            "name": "W3PhonePipe",
            "id": "pipe-W3PhonePipe-1d3400b0862df7dd59fa22bba58d1607",
            "file": "projects/w3/src/lib/pipes/w3-phone.pipe.ts",
            "type": "pipe",
            "description": "<p>Pipe para numero de telefone</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "w3Phone",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\n\n/**\n * Pipe para numero de telefone\n */\n@Pipe({\n  name: \"w3Phone\"\n})\nexport class W3PhonePipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    let str = value + \"\";\n\n    str = str.replace(/\\D/g, \"\");\n\n    if (str.length === 11) {\n      str = str.replace(/^(\\d{2})(\\d{5})(\\d{4})/, \"($1) $2-$3\");\n    } else {\n      str = str.replace(/^(\\d{2})(\\d{4})(\\d{4})/, \"($1) $2-$3\");\n    }\n\n    return str;\n  }\n}\n"
        },
        {
            "name": "W3WeekDayPipe",
            "id": "pipe-W3WeekDayPipe-5c0aa517a47110663ed95c2cff06bef1",
            "file": "projects/w3/src/lib/pipes/w3-week-day.pipe.ts",
            "type": "pipe",
            "description": "<p>Pipe para dias da semana</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "w3WeekDay",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\n\n/**\n * Pipe para dias da semana\n */\n@Pipe({\n  name: \"w3WeekDay\"\n})\nexport class W3WeekDayPipe implements PipeTransform {\n  transform(value: string): string {\n    switch (value) {\n      case \"mon\":\n        return \"Segunda-feira\";\n\n      case \"tue\":\n        return \"Terça-feira\";\n\n      case \"wed\":\n        return \"Quarta-feira\";\n\n      case \"thu\":\n        return \"Quinta-feira\";\n\n      case \"fri\":\n        return \"Sexta-feira\";\n\n      case \"sat\":\n        return \"Sábado\";\n\n      case \"sun\":\n        return \"Domingo\";\n\n      default:\n        return value;\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "CollectionResponse",
            "id": "interface-CollectionResponse-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "old",
                    "type": "null",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ResponseCollection"
        },
        {
            "name": "DataAclModel",
            "id": "interface-DataAclModel-189089b2a1d8da1101094f0871db91a2",
            "file": "projects/w3/src/lib/apps/acl/acl.model.ts",
            "type": "interface",
            "sourceCode": "export interface DataAclModel {\n    roles: string[];\n    perms: string[];\n}\n\n\nexport interface Role {\n    id: number;\n    name: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface Permission {\n    id: number;\n    name: string;\n    group: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface ResponseAclData {\n    roles: Role[];\n    permissions: Permission[];\n}\n",
            "properties": [
                {
                    "name": "perms",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "roles",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DataObj",
            "id": "interface-DataObj-ebdd5f9db1eb43d5b08c8881d0a52c8a",
            "file": "projects/w3/src/lib/apps/web-socket/web-socket.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nimport Echo from \"laravel-echo\";\nimport { environment } from \"@env/environment\";\nimport { W3Notification } from \"./notification\";\nimport { W3StorageService } from \"../storage/storage.service\";\n\ninterface DataObj {\n  [key: string]: any;\n}\n\nexport interface SwChannel {\n  name: string;\n\n  listen(event: string, func: (e) => void): SwChannel;\n  notification(func: (e: W3Notification) => void): SwChannel;\n}\n\nexport interface SwInChannel<T> extends SwChannel {\n  here(func: (users: T[]) => void): SwInChannel<T>;\n\n  joining(func: (user: T) => void): SwInChannel<T>;\n\n  leaving(func: (user: T) => void): SwInChannel<T>;\n\n  listenForWhisper(\n    eventName: string,\n    func: (e: DataObj) => void\n  ): SwInChannel<T>;\n\n  whisper(eventName: string, e: T): SwInChannel<T>;\n}\n\n/**\n * Service para conexões por Socket.\n * [Laravel Echo]{@link https://github.com/laravel/echo}\n *\n *\n *\n * @example\n * const options: Echo = new Echo({\n *                   broadcaster: 'pusher',\n *                   key: 'asd75gasd581as',\n *                   cluster: 'us2',\n *                   authEndpoint: 'myapi/broadcasting/auth',\n *                   logToConsole: true,\n *                   auth: {\n *                       headers: {\n *                       Authorization: 'Bearer ...'\n *                   }\n *                 }\n * });\n *\n * ngOnInit(){\n *                   this.socket.connect(options);\n *\n *                   const channel = this.socket.createPrivateChannel(`MeuCanal.User.${userId}`)\n *\n *                   channel.listen(`MeuCanal.User.${userId}`, e => {\n *                                      console.log('novo evento')\n *                   })\n *\n *                   channel.notification(n: W3Notification) => {\n *                                       console.log('nova notificação')\n *                   }\n *\n * }\n */\n@Injectable()\nexport class W3WebSocketService {\n  private _echo;\n  private _channels: string[] = [];\n\n  constructor(private storage: W3StorageService) {}\n\n  get echo(): any {\n    return this._echo;\n  }\n\n  /**\n   *\n   * @param connectOptions Instancia do LaravelEcho\n   */\n  connect(connectOptions: Echo): W3WebSocketService {\n    if (this._echo) {\n      return this;\n    }\n\n    const token = this.storage.get(\"access_token\");\n\n    // this._echo = new Echo({\n    //     broadcaster: 'pusher',\n    //     key: environment.SOCKET_KEY,\n    //     cluster: environment.SOCKET_CLUSTER,\n    //     authEndpoint: environment.URL_SOCKET + '/broadcasting/auth',\n    //     logToConsole: true,\n    //     auth: {\n    //         headers: {\n    //             Authorization: 'Bearer ' + token\n    //         }\n    //     }\n    // });\n\n    console.log(\"Init Listen->\", this._channels);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param channel Nome do canal ao qual deseja receber eventos\n   */\n  joinChannel<T>(channel: string): SwInChannel<T> {\n    this._channels.push(channel);\n    return this._echo.join(channel);\n  }\n\n  /**\n   * Método para criação de novo canal privado\n   * @param channel nome do canal\n   */\n  createPrivateChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.private(channel);\n  }\n\n  /**\n   * Método para criação de novo canal público\n   * @param channel nome do canal\n   */\n  createPublicChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.channel(channel);\n  }\n\n  /**\n   * cancelar recebimento de informação do canal\n   * @param ch\n   */\n  leave(ch: SwChannel): void {\n    if (this._echo) {\n      this._echo.leave(ch.name);\n    }\n  }\n\n  /**\n   * Sair de todos os canais\n   */\n  reset(): void {\n    if (this._echo) {\n      this._channels.map(ch => this._echo.leave(ch));\n      this._echo = null;\n      this._channels = [];\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-ebdd5f9db1eb43d5b08c8881d0a52c8a",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 8
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "DataUpload",
            "id": "interface-DataUpload-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "_pathSrc",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "created_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "drive",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "gallery",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "mime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "owner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "owner_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "path_large",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "path_large_src",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "path_medium",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "path_medium_src",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "path_src",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "path_thumb",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "path_thumb_src",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "size",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "updated_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 109
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EnumItem",
            "id": "interface-EnumItem-1ea457591be54d9375c4ab7ac92bc4cb",
            "file": "projects/w3/src/lib/helpers/utils.ts",
            "type": "interface",
            "sourceCode": "import { Sort } from \"@angular/material\";\n\nexport interface EnumItem {\n  key: string | number;\n  value: any;\n  label?: string;\n}\n\n/**\n * Converte Enum para Array\n * @param _enum\n */\nexport function enumToArray(_enum): EnumItem[] {\n  return Object.keys(_enum).map(\n    index => ({ key: _enum[index], value: index } as EnumItem)\n  );\n}\n\n/**\n * Converte Enum para Array usado seus labels como valor\n */\nexport function enumToArrayWithLabels(_enum, labels: string[]): EnumItem[] {\n  const newEnumArray = [];\n  Object.keys(_enum).forEach((ob, i) => {\n    newEnumArray.push({\n      key: _enum[ob],\n      value: ob,\n      label: labels[i] ? labels[i] : ob\n    });\n  });\n  return newEnumArray;\n}\n\nexport function makeSortParams(sort: Sort, def: string): string {\n  if (sort.direction === \"asc\") {\n    return `${sort.active}`;\n  } else if (sort.direction === \"desc\") {\n    return `-${sort.active}`;\n  } else {\n    return def;\n  }\n}\n\n/**\n * Compara jsons\n * @param current Json 1\n * @param next Json 2\n * @param debug `true` se deve loggar os JSON\n */\nexport function jsonEqual(current, next, debug?: boolean): boolean {\n  const cj = JSON.stringify(current);\n  const nj = JSON.stringify(next);\n\n  if (debug === true) {\n    console.log(\"jsonEqual.debug\", cj === nj, \"OLD\", cj, \"NEW\", nj);\n  }\n\n  return cj === nj;\n}\n\n/**\n * Verifica se é numérico\n * @param v\n */\nexport function w3CheckIsNumeric(v): boolean {\n  const r = new RegExp(/^(\\d+)$/);\n  return r.test(v) ? +v : v;\n}\n\n/**\n * Verifica se é vazio\n * @param v\n */\nexport function w3IsEmpty(v: any): boolean {\n  return v === undefined || v === null || v === \"\" || v.length === 0;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Error",
            "id": "interface-Error-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "http_code",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "validation",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FileReaderEvent",
            "id": "interface-FileReaderEvent-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "target",
                    "type": "FileReaderEventTarget",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 120
                }
            ],
            "extends": "Event"
        },
        {
            "name": "FileReaderEventTarget",
            "id": "interface-FileReaderEventTarget-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "result",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 114
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EventTarget"
        },
        {
            "name": "HttpPostOptions",
            "id": "interface-HttpPostOptions-cf3152ddacc16cb53316e9d57ee01823",
            "file": "projects/w3/src/lib/services/request.model.ts",
            "type": "interface",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface W3MetaPagination {\n    page: number;\n    total: number;\n    per_page: number;\n    current_page: number;\n}\n\nexport interface HttpPostOptions {\n    headers?:\n        | HttpHeaders\n        | {\n              [header: string]: string | string[];\n          };\n    observe?: 'body';\n    params?:\n        | HttpParams\n        | {\n              [param: string]: string | string[];\n          };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n}\n",
            "properties": [
                {
                    "name": "headers",
                    "type": "HttpHeaders | literal type",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "observe",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "params",
                    "type": "HttpParams | literal type",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "reportProgress",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "responseType",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "withCredentials",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ItemRespDec",
            "id": "interface-ItemRespDec-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ResponseItem"
        },
        {
            "name": "ItemResponse",
            "id": "interface-ItemResponse-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ItemUploadResponse",
            "id": "interface-ItemUploadResponse-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "data",
                    "type": "DataUpload",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "status",
                    "type": "\"error\" | \"success\"",
                    "optional": true,
                    "description": "",
                    "line": 86
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MessagesResponse",
            "id": "interface-MessagesResponse-f7b1edc1c3ff35d961975a39c03bcabd",
            "file": "projects/w3/src/lib/interceptor/messages-response.ts",
            "type": "interface",
            "sourceCode": "export interface MessagesResponse {\n\n    respondOffline(): void;\n\n    respondOk(data: any): void;\n\n    respondNotFound(data: any): void;\n\n    respondValidation(data: any): void;\n\n    respondPermissionRequired(data): void;\n\n    respondUnauthorized(data): void;\n\n    respondInternalError(error): void;\n\n    respondError(error): void;\n}\n\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "respondError",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondInternalError",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondNotFound",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondOffline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3
                },
                {
                    "name": "respondOk",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondPermissionRequired",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondUnauthorized",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondValidation",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Permission",
            "id": "interface-Permission-189089b2a1d8da1101094f0871db91a2",
            "file": "projects/w3/src/lib/apps/acl/acl.model.ts",
            "type": "interface",
            "sourceCode": "export interface DataAclModel {\n    roles: string[];\n    perms: string[];\n}\n\n\nexport interface Role {\n    id: number;\n    name: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface Permission {\n    id: number;\n    name: string;\n    group: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface ResponseAclData {\n    roles: Role[];\n    permissions: Permission[];\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "display_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "group",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Response20x",
            "id": "interface-Response20x-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "status",
                    "type": "\"success\" | \"error\"",
                    "optional": true,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Response40x",
            "id": "interface-Response40x-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "error",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "status",
                    "type": "\"success\" | \"error\"",
                    "optional": true,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResponseAclData",
            "id": "interface-ResponseAclData-189089b2a1d8da1101094f0871db91a2",
            "file": "projects/w3/src/lib/apps/acl/acl.model.ts",
            "type": "interface",
            "sourceCode": "export interface DataAclModel {\n    roles: string[];\n    perms: string[];\n}\n\n\nexport interface Role {\n    id: number;\n    name: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface Permission {\n    id: number;\n    name: string;\n    group: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface ResponseAclData {\n    roles: Role[];\n    permissions: Permission[];\n}\n",
            "properties": [
                {
                    "name": "permissions",
                    "type": "Permission[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "roles",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResponseCollection",
            "id": "interface-ResponseCollection-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "data",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "includes",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "links",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "meta",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResponseItem",
            "id": "interface-ResponseItem-c2c7b3c35db8d9d11af9b9fef95fba96",
            "file": "projects/w3/src/lib/responses/responses.model.ts",
            "type": "interface",
            "sourceCode": "export interface CollectionResponse extends ResponseCollection {\n    old?: null;\n}\n\n/**\n * @deprecated use ResponseItem<T>\n */\nexport interface ItemResponse {\n    data: any;\n    message?: string; // mytodo remove\n}\n\n/**\n * @deprecated use ResponseItem\n */\nexport interface ItemRespDec<T> extends ResponseItem<T> {\n\n}\n\nexport interface ResponseItem<T> {\n    data: T;\n}\n\nexport interface ResponseCollection<T = any> {\n    data: T[];\n    includes?: string[];\n    // pagination?: {};\n    meta?: {\n        current_page: number;\n        from: number;\n        last_page: number;\n        path: string;\n        per_page: number;\n        to: number;\n        total: number;\n    };\n    links?: {\n        first: string;\n        last: string;\n        prev: string;\n        next: string;\n    };\n}\n\nexport interface Response20x {\n    status?: 'success' | 'error';\n    message?: string;\n    data?: any;\n}\n\nexport interface Response40x {\n    status?: 'success' | 'error';\n    message: string;\n    data?: any;\n    error: Error;\n}\n\ninterface Error {\n    code: string;\n    http_code: number;\n    validation?: { [key: string]: string[]; }; // [{ [key: string]: string[]; }];\n    // validation: {\n    //     [key: string]: string[]\n    // };\n}\n\n//\n// const d: Response40x = {\n//     error: {\n//         code: 'WRONG_ARGS',\n//         http_code: 400,\n//         message: 'Erro de validação',\n//         validation: {\n//             indication: [\n//                 'O campo indication é obrigatório.',\n//                 'sdf'\n//             ]\n//         }\n//     }\n// };\n\nexport interface ItemUploadResponse {\n    status?: 'error' | 'success';\n    message?: string;\n    data: DataUpload;\n}\n\nexport interface DataUpload {\n    id: number;\n    name: string;\n    path: string;\n    path_src: string;\n    path_large?: any;\n    path_large_src?: any;\n    path_medium?: any;\n    path_medium_src?: any;\n    path_thumb?: any;\n    path_thumb_src?: any;\n    mime: string;\n    size: number;\n    gallery: string;\n    drive: string;\n    owner_id: string;\n    owner_type: string;\n    created_at: string;\n    updated_at: string;\n    _pathSrc: '';\n}\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string;\n}\n\nexport interface FileReaderEvent extends Event {\n    target: FileReaderEventTarget;\n\n    getMessage(): string;\n}\n\n\n",
            "properties": [
                {
                    "name": "data",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Role",
            "id": "interface-Role-189089b2a1d8da1101094f0871db91a2",
            "file": "projects/w3/src/lib/apps/acl/acl.model.ts",
            "type": "interface",
            "sourceCode": "export interface DataAclModel {\n    roles: string[];\n    perms: string[];\n}\n\n\nexport interface Role {\n    id: number;\n    name: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface Permission {\n    id: number;\n    name: string;\n    group: string;\n    display_name: string;\n    description: string;\n}\n\nexport interface ResponseAclData {\n    roles: Role[];\n    permissions: Permission[];\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "display_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SwChannel",
            "id": "interface-SwChannel-ebdd5f9db1eb43d5b08c8881d0a52c8a",
            "file": "projects/w3/src/lib/apps/web-socket/web-socket.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nimport Echo from \"laravel-echo\";\nimport { environment } from \"@env/environment\";\nimport { W3Notification } from \"./notification\";\nimport { W3StorageService } from \"../storage/storage.service\";\n\ninterface DataObj {\n  [key: string]: any;\n}\n\nexport interface SwChannel {\n  name: string;\n\n  listen(event: string, func: (e) => void): SwChannel;\n  notification(func: (e: W3Notification) => void): SwChannel;\n}\n\nexport interface SwInChannel<T> extends SwChannel {\n  here(func: (users: T[]) => void): SwInChannel<T>;\n\n  joining(func: (user: T) => void): SwInChannel<T>;\n\n  leaving(func: (user: T) => void): SwInChannel<T>;\n\n  listenForWhisper(\n    eventName: string,\n    func: (e: DataObj) => void\n  ): SwInChannel<T>;\n\n  whisper(eventName: string, e: T): SwInChannel<T>;\n}\n\n/**\n * Service para conexões por Socket.\n * [Laravel Echo]{@link https://github.com/laravel/echo}\n *\n *\n *\n * @example\n * const options: Echo = new Echo({\n *                   broadcaster: 'pusher',\n *                   key: 'asd75gasd581as',\n *                   cluster: 'us2',\n *                   authEndpoint: 'myapi/broadcasting/auth',\n *                   logToConsole: true,\n *                   auth: {\n *                       headers: {\n *                       Authorization: 'Bearer ...'\n *                   }\n *                 }\n * });\n *\n * ngOnInit(){\n *                   this.socket.connect(options);\n *\n *                   const channel = this.socket.createPrivateChannel(`MeuCanal.User.${userId}`)\n *\n *                   channel.listen(`MeuCanal.User.${userId}`, e => {\n *                                      console.log('novo evento')\n *                   })\n *\n *                   channel.notification(n: W3Notification) => {\n *                                       console.log('nova notificação')\n *                   }\n *\n * }\n */\n@Injectable()\nexport class W3WebSocketService {\n  private _echo;\n  private _channels: string[] = [];\n\n  constructor(private storage: W3StorageService) {}\n\n  get echo(): any {\n    return this._echo;\n  }\n\n  /**\n   *\n   * @param connectOptions Instancia do LaravelEcho\n   */\n  connect(connectOptions: Echo): W3WebSocketService {\n    if (this._echo) {\n      return this;\n    }\n\n    const token = this.storage.get(\"access_token\");\n\n    // this._echo = new Echo({\n    //     broadcaster: 'pusher',\n    //     key: environment.SOCKET_KEY,\n    //     cluster: environment.SOCKET_CLUSTER,\n    //     authEndpoint: environment.URL_SOCKET + '/broadcasting/auth',\n    //     logToConsole: true,\n    //     auth: {\n    //         headers: {\n    //             Authorization: 'Bearer ' + token\n    //         }\n    //     }\n    // });\n\n    console.log(\"Init Listen->\", this._channels);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param channel Nome do canal ao qual deseja receber eventos\n   */\n  joinChannel<T>(channel: string): SwInChannel<T> {\n    this._channels.push(channel);\n    return this._echo.join(channel);\n  }\n\n  /**\n   * Método para criação de novo canal privado\n   * @param channel nome do canal\n   */\n  createPrivateChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.private(channel);\n  }\n\n  /**\n   * Método para criação de novo canal público\n   * @param channel nome do canal\n   */\n  createPublicChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.channel(channel);\n  }\n\n  /**\n   * cancelar recebimento de informação do canal\n   * @param ch\n   */\n  leave(ch: SwChannel): void {\n    if (this._echo) {\n      this._echo.leave(ch.name);\n    }\n  }\n\n  /**\n   * Sair de todos os canais\n   */\n  reset(): void {\n    if (this._echo) {\n      this._channels.map(ch => this._echo.leave(ch));\n      this._echo = null;\n      this._channels = [];\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "event",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "e",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "SwChannel",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "e",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notification",
                    "args": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "W3Notification"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "SwChannel",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "W3Notification"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "SwInChannel",
            "id": "interface-SwInChannel-ebdd5f9db1eb43d5b08c8881d0a52c8a",
            "file": "projects/w3/src/lib/apps/web-socket/web-socket.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nimport Echo from \"laravel-echo\";\nimport { environment } from \"@env/environment\";\nimport { W3Notification } from \"./notification\";\nimport { W3StorageService } from \"../storage/storage.service\";\n\ninterface DataObj {\n  [key: string]: any;\n}\n\nexport interface SwChannel {\n  name: string;\n\n  listen(event: string, func: (e) => void): SwChannel;\n  notification(func: (e: W3Notification) => void): SwChannel;\n}\n\nexport interface SwInChannel<T> extends SwChannel {\n  here(func: (users: T[]) => void): SwInChannel<T>;\n\n  joining(func: (user: T) => void): SwInChannel<T>;\n\n  leaving(func: (user: T) => void): SwInChannel<T>;\n\n  listenForWhisper(\n    eventName: string,\n    func: (e: DataObj) => void\n  ): SwInChannel<T>;\n\n  whisper(eventName: string, e: T): SwInChannel<T>;\n}\n\n/**\n * Service para conexões por Socket.\n * [Laravel Echo]{@link https://github.com/laravel/echo}\n *\n *\n *\n * @example\n * const options: Echo = new Echo({\n *                   broadcaster: 'pusher',\n *                   key: 'asd75gasd581as',\n *                   cluster: 'us2',\n *                   authEndpoint: 'myapi/broadcasting/auth',\n *                   logToConsole: true,\n *                   auth: {\n *                       headers: {\n *                       Authorization: 'Bearer ...'\n *                   }\n *                 }\n * });\n *\n * ngOnInit(){\n *                   this.socket.connect(options);\n *\n *                   const channel = this.socket.createPrivateChannel(`MeuCanal.User.${userId}`)\n *\n *                   channel.listen(`MeuCanal.User.${userId}`, e => {\n *                                      console.log('novo evento')\n *                   })\n *\n *                   channel.notification(n: W3Notification) => {\n *                                       console.log('nova notificação')\n *                   }\n *\n * }\n */\n@Injectable()\nexport class W3WebSocketService {\n  private _echo;\n  private _channels: string[] = [];\n\n  constructor(private storage: W3StorageService) {}\n\n  get echo(): any {\n    return this._echo;\n  }\n\n  /**\n   *\n   * @param connectOptions Instancia do LaravelEcho\n   */\n  connect(connectOptions: Echo): W3WebSocketService {\n    if (this._echo) {\n      return this;\n    }\n\n    const token = this.storage.get(\"access_token\");\n\n    // this._echo = new Echo({\n    //     broadcaster: 'pusher',\n    //     key: environment.SOCKET_KEY,\n    //     cluster: environment.SOCKET_CLUSTER,\n    //     authEndpoint: environment.URL_SOCKET + '/broadcasting/auth',\n    //     logToConsole: true,\n    //     auth: {\n    //         headers: {\n    //             Authorization: 'Bearer ' + token\n    //         }\n    //     }\n    // });\n\n    console.log(\"Init Listen->\", this._channels);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param channel Nome do canal ao qual deseja receber eventos\n   */\n  joinChannel<T>(channel: string): SwInChannel<T> {\n    this._channels.push(channel);\n    return this._echo.join(channel);\n  }\n\n  /**\n   * Método para criação de novo canal privado\n   * @param channel nome do canal\n   */\n  createPrivateChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.private(channel);\n  }\n\n  /**\n   * Método para criação de novo canal público\n   * @param channel nome do canal\n   */\n  createPublicChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.channel(channel);\n  }\n\n  /**\n   * cancelar recebimento de informação do canal\n   * @param ch\n   */\n  leave(ch: SwChannel): void {\n    if (this._echo) {\n      this._echo.leave(ch.name);\n    }\n  }\n\n  /**\n   * Sair de todos os canais\n   */\n  reset(): void {\n    if (this._echo) {\n      this._channels.map(ch => this._echo.leave(ch));\n      this._echo = null;\n      this._channels = [];\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "here",
                    "args": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "users",
                                    "type": "T[]"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "SwInChannel<T>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "users",
                                    "type": "T[]"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joining",
                    "args": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "user",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "SwInChannel<T>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "user",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "leaving",
                    "args": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "user",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "SwInChannel<T>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "user",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenForWhisper",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "DataObj"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "SwInChannel<T>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "DataObj"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "whisper",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string"
                        },
                        {
                            "name": "e",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "SwInChannel<T>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "e",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": "SwChannel"
        },
        {
            "name": "UserModel",
            "id": "interface-UserModel-a20c6fdade20792a43bc929b55e0f264",
            "file": "projects/w3/src/lib/apps/auth/auth.model.ts",
            "type": "interface",
            "sourceCode": "export interface UserModel {\n    id: number;\n    name: string;\n    first_name: string;\n    last_name?: any;\n    sex?: any;\n    status?: any;\n    is_online: boolean;\n    thumb?: any;\n    _thumbSrc?: any;\n    last_activity: number;\n    last_activity_dt: string;\n    city_id?: any;\n    postcode?: any;\n    street?: any;\n    about?: any;\n    complement?: any;\n    number?: any;\n    district?: any;\n    phone?: any;\n    cellphone?: any;\n    skype?: any;\n    email: string;\n    birthday?: any;\n    occupation?: any;\n    notification: boolean;\n    confirmed_at?: any;\n    created_at: string;\n    updated_at: string;\n    deleted_at?: any;\n    acl?: any;\n}\n",
            "properties": [
                {
                    "name": "_thumbSrc",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "about",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "acl",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "birthday",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "cellphone",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "city_id",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "complement",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "confirmed_at",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "created_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "deleted_at",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "district",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "first_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "is_online",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "last_activity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "last_activity_dt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "last_name",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "notification",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "number",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "occupation",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "phone",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postcode",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sex",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "skype",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "status",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "street",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "thumb",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "updated_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "W3Config",
            "id": "interface-W3Config-500e39fa21ff7243be5d8305f4c74799",
            "file": "projects/w3/src/lib/w3.config.ts",
            "type": "interface",
            "sourceCode": "import {w3StorageByLocalStorage, W3StorageOption} from './apps/storage';\nimport {InjectionToken} from '@angular/core';\n\nexport const W3_CONFIG = new InjectionToken('w3CustomConfig');\n\nexport interface W3Config {\n    storage: W3StorageOption;\n}\n\nexport const w3ConfigDefault: W3Config = {\n    storage: w3StorageByLocalStorage\n};\n",
            "properties": [
                {
                    "name": "storage",
                    "type": "W3StorageOption",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "W3ConfirmResponse",
            "id": "interface-W3ConfirmResponse-d08d7cb2ade6ccfa3101c16306a32f52",
            "file": "projects/w3/src/lib/helpers/rxjs.ts",
            "type": "interface",
            "sourceCode": "import {filter, map} from 'rxjs/operators';\nimport {defer} from 'rxjs';\n\nexport interface W3ConfirmResponse<T = any> {\n    result: string;\n    payload?: T;\n}\n\nexport const w3IsConfirmed = () => {\n    return source => defer(() => {\n\n        return source.pipe(\n            filter((response: W3ConfirmResponse) => response.result === 'OK'),\n            map((response: W3ConfirmResponse) => response.payload)\n        );\n\n    });\n};\n",
            "properties": [
                {
                    "name": "payload",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "result",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "W3MetaPagination",
            "id": "interface-W3MetaPagination-cf3152ddacc16cb53316e9d57ee01823",
            "file": "projects/w3/src/lib/services/request.model.ts",
            "type": "interface",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface W3MetaPagination {\n    page: number;\n    total: number;\n    per_page: number;\n    current_page: number;\n}\n\nexport interface HttpPostOptions {\n    headers?:\n        | HttpHeaders\n        | {\n              [header: string]: string | string[];\n          };\n    observe?: 'body';\n    params?:\n        | HttpParams\n        | {\n              [param: string]: string | string[];\n          };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n}\n",
            "properties": [
                {
                    "name": "current_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "per_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "W3AbstractRequestService",
            "id": "injectable-W3AbstractRequestService-8e10cfcb54bc5a7ffb76dd1c95ab21ab",
            "file": "projects/w3/src/lib/services/abstract-request.service.ts",
            "properties": [
                {
                    "name": "metas",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "paginationData",
                    "defaultValue": "{\n    page: 1,\n    total: 0,\n    per_page: 0,\n    current_page: 0\n  }",
                    "type": "W3MetaPagination",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "all",
                    "args": [
                        {
                            "name": "includes",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 68,
                    "description": "<p>retorna todos os itens da rota + includes</p>\n",
                    "jsdoctags": [
                        {
                            "name": "includes",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disable",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 133,
                    "description": "<p>disabled registro</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "includes",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 58,
                    "description": "<p>retorna os primeiros 15 items itens da rota + includes</p>\n",
                    "jsdoctags": [
                        {
                            "name": "includes",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "makeUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "defaultValue": "\"\""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "defaultValue": "\"\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pagination",
                    "args": [],
                    "optional": false,
                    "returnType": "W3MetaPagination",
                    "typeParameters": [],
                    "line": 155
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 124,
                    "description": "<p>remove registro</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restore",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 142,
                    "description": "<p>restore registro</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 97,
                    "description": "<p>salva data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "params",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 78,
                    "description": "<p>retorna os itens da rota  filtrados por params</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "newPage",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "description": "<p>Registra a pagina</p>\n",
                    "jsdoctags": [
                        {
                            "name": "newPage",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformCollectionResponse",
                    "args": [
                        {
                            "name": "collect",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "collect",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformItemResponse",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformRequest",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        },
                        {
                            "name": "action",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "data",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 111,
                    "description": "<p>edita informações do idem id</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpPostOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>Classe abstrata para request na API</p>\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\nimport {\n  ResponseItem,\n  ResponseCollection,\n  Response20x\n} from \"../responses/responses.model\";\nimport { HttpPostOptions, W3MetaPagination } from \"./request.model\";\n\n/**\n * Classe abstrata para request na API\n */\n@Injectable()\nexport abstract class W3AbstractRequestService<T> {\n  public metas: any;\n\n  public paginationData: W3MetaPagination = {\n    page: 1,\n    total: 0,\n    per_page: 0,\n    current_page: 0\n  };\n\n  protected constructor(protected http: HttpClient) {}\n\n  abstract getBaseUrl(): string;\n\n  protected makeUrl(path = \"\"): string {\n    return this.getBaseUrl() + path;\n  }\n\n  protected transformItemResponse(data: any): T {\n    return data;\n  }\n\n  protected transformCollectionResponse(collect: any[]): T[] {\n    return collect.map(d => this.transformItemResponse(d));\n  }\n\n  protected transformRequest(data: any, action: string): any {\n    return data;\n  }\n\n  find(id: number, params?: any): Observable<T> {\n    params = params ? this.transformRequest(params, \"find\") : {};\n\n    return this.http\n      .get<ResponseItem<T>>(`${this.getBaseUrl()}/${id}`, { params })\n      .pipe(map(res => this.transformItemResponse(res.data)));\n  }\n\n  /**\n   *  retorna os primeiros 15 items itens da rota + includes\n   */\n  get(includes: string): Observable<T[]> {\n    return this.search({\n      include: includes,\n      paginate: this.paginationData.per_page\n    });\n  }\n\n  /**\n   *  retorna todos os itens da rota + includes\n   */\n  all(includes: string): Observable<T[]> {\n    return this.search({\n      include: includes,\n      take: -1\n    });\n  }\n\n  /**\n   * retorna os itens da rota  filtrados por params\n   */\n  search(params): Observable<T[]> {\n    params = this.transformRequest(params, \"search\");\n\n    return this.http\n      .get<ResponseCollection<T>>(this.getBaseUrl(), { params })\n      .pipe(\n        tap(res => {\n          this.metas = res.meta || {};\n          this.paginationData.total = +this.metas.total;\n          this.paginationData.page = +this.metas.current_page;\n          this.paginationData.per_page = +this.metas.per_page;\n        }),\n        map(res => this.transformCollectionResponse(res.data))\n      );\n  }\n\n  /**\n   * salva data\n   */\n  save(data, options?: HttpPostOptions): Observable<T> {\n    return this.http\n      .post<Response20x>(\n        this.getBaseUrl(),\n        this.transformRequest(data, \"save\"),\n        options\n      )\n\n      .pipe(map(res => this.transformItemResponse(res.data)));\n  }\n\n  /**\n   *  edita informações do idem id\n   */\n  update(id: number, data: any, options?: HttpPostOptions): Observable<T> {\n    return this.http\n      .put<Response20x>(\n        `${this.getBaseUrl()}/${id}`,\n        this.transformRequest(data, \"update\"),\n        options\n      )\n      .pipe(map(res => this.transformItemResponse(res.data)));\n  }\n\n  /**\n   * remove registro\n   */\n  remove(id: number, options?: HttpPostOptions): Observable<boolean> {\n    return this.http\n      .delete<Response20x>(`${this.getBaseUrl()}/${id}`, options)\n      .pipe(map(res => res.status === \"success\"));\n  }\n\n  /**\n   * disabled registro\n   */\n  disable(id: number, options?: HttpPostOptions): Observable<boolean> {\n    return this.http\n      .put<Response20x>(`${this.getBaseUrl()}/${id}/disable`, {}, options)\n      .pipe(map(res => res.status === \"success\"));\n  }\n\n  /**\n   * restore registro\n   */\n  restore(id: number, options?: HttpPostOptions): Observable<boolean> {\n    return this.http\n      .put<Response20x>(`${this.getBaseUrl()}/${id}/restore`, {}, options)\n      .pipe(map(res => res.status === \"success\"));\n  }\n\n  /**\n   * Registra a pagina\n   */\n  setPage(newPage: number): void {\n    this.paginationData.page = newPage;\n  }\n\n  pagination(): W3MetaPagination {\n    return this.paginationData;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 25,
                "modifierKind": [
                    113
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "W3AclService",
            "id": "injectable-W3AclService-a4ac06f1fe14cb74d439e96adc22085d",
            "file": "projects/w3/src/lib/apps/acl/acl.service.ts",
            "properties": [
                {
                    "name": "onChange$",
                    "type": "Observable<DataAclModel>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "allPerms",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "allRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "can",
                    "args": [
                        {
                            "name": "perms",
                            "type": "string | string[]"
                        },
                        {
                            "name": "requireAll",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "perms",
                            "type": "string | string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requireAll",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "DataAclModel",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "hasRole",
                    "args": [
                        {
                            "name": "roles",
                            "type": "string | string[]"
                        },
                        {
                            "name": "requireAll",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "string | string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requireAll",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": "DataAclModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DataAclModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {DataAclModel} from './acl.model';\nimport * as _ from 'lodash';\n\n@Injectable()\nexport class W3AclService {\n\n    public onChange$: Observable<DataAclModel>;\n\n    private _dataInit = {\n        roles: [],\n        perms: []\n    };\n    private _data = new BehaviorSubject<DataAclModel>(this._dataInit);\n\n    constructor() {\n        this.onChange$ = this._data.asObservable();\n    }\n\n    getData(): DataAclModel {\n        return this._data.value;\n    }\n\n    setData(data: DataAclModel): void {\n        console.log('ACL.setData', data);\n        this._data.next(data);\n    }\n\n    allRoles(): string[] {\n        return this._data.value.roles;\n    }\n\n    allPerms(): string[] {\n        return this._data.value.perms;\n    }\n\n    can(perms: string | string[], requireAll ?: boolean): boolean {\n        // console.log('ACL.findCan', perms, this.allPerms());\n        return this.check(perms, this.allPerms(), requireAll);\n    }\n\n    hasRole(roles: string | string[], requireAll ?: boolean): boolean {\n        return this.check(roles, this.allRoles(), requireAll);\n    }\n\n    private check(find: string | string[], data: string[], requireAll ?: boolean): boolean {\n\n        if (typeof find === 'string') {\n\n            if (typeof requireAll === 'undefined') {\n                requireAll = find.includes(',');\n            }\n\n            find = find.split(/[\\|,\\,]/);\n        }\n        const result = _.intersection(find, data);\n        const min = requireAll ? find.length : 1;\n\n        return result.length >= min;\n    }\n\n    reset(): void {\n        this._data.next(this._dataInit);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "type": "injectable"
        },
        {
            "name": "W3AuthService",
            "id": "injectable-W3AuthService-8d7b31d8482631259b91bea72fd36b88",
            "file": "projects/w3/src/lib/apps/auth/auth.service.ts",
            "properties": [
                {
                    "name": "_headers",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "<p>Headers for auth request&#39;s</p>\n",
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getUrlRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel | any>",
                    "typeParameters": [],
                    "line": 32,
                    "description": "<p>Serviço de login</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 817,
                                "end": 822,
                                "flags": 0,
                                "escapedText": "email"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 811,
                                "end": 816,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 835,
                                "end": 843,
                                "flags": 0,
                                "escapedText": "password"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 829,
                                "end": 834,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>Service de sign-up</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remind",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 47,
                    "description": "<p>Serviço de recuperação de senha</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 60,
                    "description": "<p>Serviço de alteração de senha</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addHeader",
                    "args": [
                        {
                            "name": "key",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "description": "",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5453,
                                "end": 5456,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 5447,
                                "end": 5452,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>nome do header. e.g <code>Content-Type</code></p>\n"
                        },
                        {
                            "name": {
                                "pos": 5504,
                                "end": 5509,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 5498,
                                "end": 5503,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>valor do header. e.g <code>application/json</code></p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "clearToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "description": "<p>Método que remove os dados da sessão</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "forceLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 72,
                    "description": "<p>Get access token</p>\n<p>Should return access token in Observable from e.g.\nlocalStorage</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "getExpiration",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "description": "<p>Recupera o time de expiração do token</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "getHeaders",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 208,
                    "description": "<p>Add token to headers, dependent on server\nset-up, by default adds a bearer token.\nCalled by interceptor.</p>\n<p>To change behavior, override this method.</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "getUrlRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "description": "<p>Url de refresh token (deve ser sobreescrita), e.g <code>.../rapi/guardian/auth/refresh</code></p>\n",
                    "modifierKind": [
                        114,
                        117
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "getUrlRevokeToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "description": "<p>Url para expirar o token</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 60,
                    "description": "<p>Check, if user already authorized.</p>\n<p>Should return Observable with true or false values</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 180,
                    "description": "<p>Verifica se o usuário está logado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "isLoggedOut",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 188,
                    "description": "<p>Verifica se o usuário está logado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel | any>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 154,
                    "description": "<p>Método que realiza o logout e limpa a sessão</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "refreshShouldHappen",
                    "args": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "description": "<p>Function, checks response of failed request to determine,\nwhether token be refreshed or not.</p>\n<p>Essentially checks status</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>Function, that should perform refresh token verifyTokenRequest</p>\n<p>Should be successfully completed so interceptor\ncan execute pending requests or retry original one</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "remind",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 139,
                    "description": "<p>Método &#39;Esqueci minha senha&#39; (deve ser sobreescrito)</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3732,
                                "end": 3736,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 3726,
                                "end": 3731,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 147,
                    "description": "<p>Método &#39;Recuperar senha&#39; (deve ser sobreescrito)</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3887,
                                "end": 3891,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 3881,
                                "end": 3886,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "setSession",
                    "args": [
                        {
                            "name": "authResult",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "description": "<p>Seta na sessão do navegador dados de auth e.g token, expires_at....</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3335,
                                "end": 3345,
                                "flags": 0,
                                "escapedText": "authResult"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 3329,
                                "end": 3334,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Result do login</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                },
                {
                    "name": "verifyTokenRequest",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "description": "<p>Verify that outgoing request is refresh-token,\nso interceptor won&#39;t intercept this request</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3AuthAbstractService"
                    }
                }
            ],
            "description": "<p>Serviço padrão de autenticação</p>\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs/Observable\";\nimport { map, shareReplay, tap } from \"rxjs/operators\";\n\nimport { UserModel } from \"./auth.model\";\nimport { W3AuthAbstractService } from \"./auth-abstract.service\";\nimport { W3StorageService } from \"../storage\";\n\nimport { environment } from \"@env/environment\";\nimport { W3MeService } from \"./me.service\";\n\n/**\n * Serviço padrão de autenticação\n */\n@Injectable()\nexport class W3AuthService extends W3AuthAbstractService {\n  constructor(http: HttpClient, storage: W3StorageService, me: W3MeService) {\n    super(http, storage, me);\n  }\n\n  getUrlRefreshToken(): string {\n    return `${environment.URL_API}/rapi/guardian/auth/refresh`;\n  }\n\n  /**\n   * Serviço de login\n   * @param email\n   * @param password\n   */\n  login(email: string, password: string): Observable<UserModel | any> {\n    return this.http\n      .post(`${environment.URL_API}/rapi/guardian/auth/login`, {\n        email,\n        password\n      })\n      .pipe(\n        tap(res => this.setSession(res)),\n        shareReplay()\n      );\n  }\n\n  /**\n   * Serviço de recuperação de senha\n   */\n  remind(data): Observable<any> {\n    return this.http\n      .post(`${environment.URL_API}/rapi/guardian/auth/password/remind`, data)\n      .pipe(\n        map(resp => {\n          return resp;\n        })\n      );\n  }\n\n  /**\n   * Serviço de alteração de senha\n   */\n  reset(data): Observable<any> {\n    return this.http\n      .post(`${environment.URL_API}/rapi/guardian/auth/password/reset`, data)\n      .pipe(\n        map(resp => {\n          return resp;\n        })\n      );\n  }\n\n  /**\n   * Service de sign-up\n   */\n  register(data): Observable<any> {\n    return this.http\n      .post(`${environment.URL_API}/rapi/guardian/auth/sign-up`, data)\n      .pipe(\n        map(resp => {\n          return resp;\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "storage",
                        "type": "W3StorageService"
                    },
                    {
                        "name": "me",
                        "type": "W3MeService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "W3StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "me",
                        "type": "W3MeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "W3AuthAbstractService",
            "type": "injectable"
        },
        {
            "name": "W3MeService",
            "id": "injectable-W3MeService-079848864e720f97bb993d447fc902a8",
            "file": "projects/w3/src/lib/apps/auth/me.service.ts",
            "properties": [
                {
                    "name": "onChange$",
                    "type": "Observable<UserModel>",
                    "optional": false,
                    "description": "<p>Observable emitido em caso de mudança no usuário logado</p>\n",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "description": "<p>Emite um valor <code>null</code> no _user</p>\n"
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "UserModel",
                    "typeParameters": [],
                    "line": 40,
                    "description": "<p>Usuário logado</p>\n"
                },
                {
                    "name": "me",
                    "args": [
                        {
                            "name": "params",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 62,
                    "description": "<p>Consulta pelo usuário logado</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1293,
                                "end": 1299,
                                "flags": 0,
                                "escapedText": "params"
                            },
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1287,
                                "end": 1292,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "description": "<p>Faz o subscribe na consulta de current user</p>\n"
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>Emite um novo evento em <code>_user</code> com o valor informado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 847,
                                "end": 851,
                                "flags": 0,
                                "escapedText": "user"
                            },
                            "type": "UserModel",
                            "tagName": {
                                "pos": 841,
                                "end": 846,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 77,
                    "description": "<p>Atualiza os dados do usuário logado</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1634,
                                "end": 1638,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1628,
                                "end": 1633,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Usuário logado</p>\n"
                        }
                    ]
                }
            ],
            "description": "<p>Service de controle do usuário logado</p>\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\nimport { environment } from \"@env/environment\";\nimport { UserModel } from \"./auth.model\";\nimport { ItemRespDec, ItemResponse } from \"../../responses/responses.model\";\n\n/**\n * Service de controle do usuário logado\n */\n@Injectable()\nexport class W3MeService {\n  /**\n   * Observable emitido em caso de mudança no usuário logado\n   */\n  public onChange$: Observable<UserModel>;\n\n  /**\n   * Behavior subject do usuário logado\n   */\n  private _user = new BehaviorSubject<UserModel>(null);\n\n  constructor(private http: HttpClient) {\n    this.onChange$ = this._user.asObservable();\n  }\n\n  /**\n   * Emite um novo evento em `_user` com o valor informado\n   * @param user\n   */\n  public setUser(user: UserModel): void {\n    return this._user.next(user);\n  }\n\n  /**\n   * Usuário logado\n   */\n  getUser(): UserModel {\n    return this._user.value;\n  }\n\n  /**\n   * Faz o subscribe na consulta de current user\n   */\n  refresh(): void {\n    this.me().subscribe();\n  }\n\n  /**\n   * Emite um valor `null` no _user\n   */\n  clear(): void {\n    this._user.next(null);\n  }\n\n  /**\n   * Consulta pelo usuário logado\n   * @param params\n   */\n  me(params?): Observable<UserModel> {\n    return this.http\n      .get<ItemRespDec<UserModel>>(`${environment.URL_API}/rapi/guardian/me`, {\n        params: params\n      })\n      .pipe(\n        map(res => res.data),\n        tap(user => this.setUser(user))\n      );\n  }\n\n  /**\n   * Atualiza os dados do usuário logado\n   * @param data Usuário logado\n   */\n  update(data): Observable<UserModel> {\n    return this.http\n      .put<ItemResponse>(`${environment.URL_API}/rapi/guardian/me`, data)\n      .pipe(\n        map(res => res.data),\n        tap(user => this.setUser(user))\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "W3MessagesLv55ResponseService",
            "id": "injectable-W3MessagesLv55ResponseService-2344a1a508ac4cc4a551ecf5ce5e06f2",
            "file": "projects/w3/src/lib/interceptor/messages-lv55-response.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "respondError",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondNotFound",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondPermissionRequired",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>// Usuario não possui essa permissão CAM/ROLE</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1152,
                                "end": 1156,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1146,
                                "end": 1151,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "respondUnauthorized",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondValidation",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondError",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondInternalError",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondNotFound",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondOffline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondOk",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondPermissionRequired",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "description": "<p>// Usuario não possui essa permissão CAM/ROLE</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1247,
                                "end": 1251,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1241,
                                "end": 1246,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondUnauthorized",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondValidation",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                }
            ],
            "description": "<p>https://github.com/scttcper/ngx-toastr</p>\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ToastrService} from 'ngx-toastr';\nimport * as _ from 'lodash';\nimport {MessagesResponse} from './messages-response';\nimport {W3MessagesBaseResponseService} from './messages-base-response.service';\n\n/**\n * https://github.com/scttcper/ngx-toastr\n */\n\n@Injectable()\nexport class W3MessagesLv55ResponseService extends W3MessagesBaseResponseService implements MessagesResponse {\n\n    constructor(_toast: ToastrService) {\n        super(_toast);\n    }\n\n    respondNotFound(data): void {\n        if (data.status === 'error' && data.error.message) {\n            this._toast.error(data.error.message);\n        }\n    }\n\n    respondValidation(data): void {\n\n        if (!data.error) {\n            return;\n        }\n\n        let error = '';\n\n        if (data.error.validation) {\n            error = '<ul>';\n\n            _.forEach(data.error.validation, (msg: string) => {\n                error += '<li>' + msg + '</li>';\n            });\n\n            error += '</ul>';\n        }\n\n        this._toast.error(error, data.error.message);\n    }\n\n    /**\n     * // Usuario não possui essa permissão CAM/ROLE\n     * @param data\n     */\n    respondPermissionRequired(data): void {\n        const msg = (data.error && data.error.message)\n            ? data.error.message\n            : 'Seu usuário não possui acesso!';\n\n        this._toast.warning(msg);\n    }\n\n    respondUnauthorized(data): void {\n        if (this.getCode(data) === 'UNAUTHORIZED') {\n            return;\n        }\n\n        const msg = (data.error && data.error.message)\n            ? data.error.message\n            : 'Favor efetuar login!';\n\n        this._toast.info(msg);\n    }\n\n    respondError(data): void {\n        if (data.error && data.error.message) {\n            this._toast.error(data.error.message);\n        } else {\n            this.respondInternalError(data);\n        }\n    }\n\n    private getCode(data): string {\n        return data.error ? data.error.code : null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_toast",
                        "type": "ToastrService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_toast",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "W3MessagesBaseResponseService",
            "type": "injectable"
        },
        {
            "name": "W3MessagesLv56ResponseService",
            "id": "injectable-W3MessagesLv56ResponseService-c523d8de65088f771d6c6daf20d453ec",
            "file": "projects/w3/src/lib/interceptor/messages-lv56-response.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "respondError",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondNotFound",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondPermissionRequired",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "description": "<p>// Usuario não possui essa permissão CAM/ROLE</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1174,
                                "end": 1178,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1168,
                                "end": 1173,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "respondUnauthorized",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondValidation",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondError",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondInternalError",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondNotFound",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondOffline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondOk",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondPermissionRequired",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "description": "<p>// Usuario não possui essa permissão CAM/ROLE</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1247,
                                "end": 1251,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1241,
                                "end": 1246,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondUnauthorized",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                },
                {
                    "name": "respondValidation",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "W3MessagesBaseResponseService"
                    }
                }
            ],
            "description": "<p>https://github.com/scttcper/ngx-toastr</p>\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {ToastrService} from 'ngx-toastr';\n\nimport * as _ from 'lodash';\nimport {MessagesResponse} from './messages-response';\nimport {W3MessagesBaseResponseService} from './messages-base-response.service';\n\n/**\n * https://github.com/scttcper/ngx-toastr\n */\n\n@Injectable()\nexport class W3MessagesLv56ResponseService extends W3MessagesBaseResponseService implements MessagesResponse {\n\n    constructor(_toast: ToastrService) {\n        super(_toast);\n    }\n\n    respondNotFound(data): void {\n        if (data.status === 'error' && data.message) {\n            this._toast.error(data.message);\n        }\n    }\n\n    respondValidation(data): void {\n        if (!data.error) {\n            return;\n        }\n\n        let error = '';\n\n        if (data.error.validation) {\n            error = '<ul>';\n\n            _.forEach(data.error.validation, (msg: string) => {\n                error += '<li>' + msg + '</li>';\n            });\n\n            error += '</ul>';\n        }\n\n        this._toast.error(error, data.message);\n    }\n\n    /**\n     * // Usuario não possui essa permissão CAM/ROLE\n     * @param data\n     */\n    respondPermissionRequired(data): void {\n        const msg = (data.error && data.message)\n            ? data.message\n            : 'Seu usuário não possui acesso!';\n\n        this._toast.warning(msg);\n    }\n\n    respondUnauthorized(data): void {\n        if (this.getCode(data) === 'UNAUTHORIZED') {\n            return;\n        }\n\n        const msg = (data.error && data.message)\n            ? data.message\n            : 'Favor efetuar login!';\n\n        this._toast.info(msg);\n    }\n\n    respondError(data): void {\n        if (data.error && data.message) {\n            this._toast.error(data.message);\n        } else {\n            this.respondInternalError(data);\n        }\n    }\n\n    private getCode(data): string {\n        return data.error ? data.error.code : null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_toast",
                        "type": "ToastrService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_toast",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "W3MessagesBaseResponseService",
            "type": "injectable"
        },
        {
            "name": "W3NotificationService",
            "id": "injectable-W3NotificationService-2f77fcd50fd27ad3a3faaa3e8672be19",
            "file": "projects/w3/src/lib/apps/notification/notifications.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "snackBar",
                    "type": "MatSnackBar",
                    "optional": false,
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "confirmDeleteDialog",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "defaultValue": "\"\""
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<W3ConfirmResponse>",
                    "typeParameters": [],
                    "line": 77,
                    "description": "<p>Dialog Confirmação de deleção</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "defaultValue": "\"\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDialog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "typeClass",
                            "type": "string",
                            "defaultValue": "\"warn\""
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<W3ConfirmResponse>",
                    "typeParameters": [],
                    "line": 89,
                    "description": "<p>Dialog Confirmação</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeClass",
                            "type": "string",
                            "defaultValue": "\"warn\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "description": "<p>Info error</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>Info toast</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "defaultValue": "\"bottom\""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "defaultValue": "4000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "description": "<p>Notificação de snackbar</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "defaultValue": "\"bottom\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "defaultValue": "4000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>Info toast</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "description": "<p>Warning toast</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>Serviço de notificações e alertas</p>\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { MatDialog, MatDialogRef, MatSnackBar } from \"@angular/material\";\n\nimport { ToastrService } from \"ngx-toastr\";\n\nimport { Observable } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\n\nimport { W3ConfirmResponse } from \"../../helpers/rxjs\";\nimport { W3MatConfirmDialogComponent } from \"./components/w3-mat-confirm-dialog/w3-mat-confirm-dialog.component\";\n\n/**\n * Serviço de notificações e alertas\n */\n@Injectable()\nexport class W3NotificationService {\n  private _confirmDialogRef: MatDialogRef<W3MatConfirmDialogComponent>;\n\n  /**\n   *\n   * @param snackBar\n   * @param dialog\n   * @param _toast @see https://github.com/scttcper/ngx-toastr\n   */\n  constructor(\n    public snackBar: MatSnackBar,\n    public dialog: MatDialog,\n    private _toast: ToastrService\n  ) {}\n\n  /**\n   * Notificação de snackbar\n   */\n  notify(\n    message: string,\n    position: string = \"bottom\",\n    duration: number = 4000\n  ): void {\n    setTimeout(() => {\n      this.snackBar.dismiss();\n    }, duration);\n\n    this.snackBar.open(message);\n  }\n\n  /**\n   * Info toast\n   */\n  info(message?: string, title?: string): void {\n    this._toast.info(message, title);\n  }\n\n  /**\n   * Info error\n   */\n  error(message?: string, title?: string): void {\n    this._toast.error(message, title);\n  }\n\n  /**\n   * Info toast\n   */\n  success(message?: string, title?: string): void {\n    this._toast.success(message, title);\n  }\n\n  /**\n   * Warning toast\n   */\n  warning(message?: string, title?: string): void {\n    this._toast.warning(message, title);\n  }\n\n  /**\n   * Dialog Confirmação de deleção\n   */\n  confirmDeleteDialog(name = \"\", payload?: any): Observable<W3ConfirmResponse> {\n    return this.confirmDialog(\n      `Deseja excluir o item ${name}?`,\n      \"Excluir item\",\n      \"warn\",\n      payload\n    );\n  }\n\n  /**\n   * Dialog Confirmação\n   */\n  confirmDialog(\n    message: string,\n    title: string,\n    typeClass = \"warn\",\n    payload?: any\n  ): Observable<W3ConfirmResponse> {\n    this._confirmDialogRef = this.dialog.open(W3MatConfirmDialogComponent, {\n      disableClose: false\n    });\n\n    this._confirmDialogRef.componentInstance.confirmMessage = message;\n    this._confirmDialogRef.componentInstance.confirmTitle = title;\n    this._confirmDialogRef.componentInstance.typeClass = typeClass;\n\n    return this._confirmDialogRef.afterClosed().pipe(\n      tap(() => (this._confirmDialogRef = null)),\n      map(r => (r ? { result: \"OK\", payload } : { result: \"CANCEL\", payload }))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "_toast",
                        "type": "ToastrService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 606,
                            "end": 614,
                            "flags": 0,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "tagName": {
                            "pos": 600,
                            "end": 605,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 627,
                            "end": 633,
                            "flags": 0,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "tagName": {
                            "pos": 621,
                            "end": 626,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 646,
                            "end": 652,
                            "flags": 0,
                            "escapedText": "_toast"
                        },
                        "type": "ToastrService",
                        "tagName": {
                            "pos": 640,
                            "end": 645,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "W3RequestAclService",
            "id": "injectable-W3RequestAclService-275bcbe5d484be726b07ab8eb9658663",
            "file": "projects/w3/src/lib/apps/acl/request-acl.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "allPerms",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "findData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ResponseAclData>",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\n\nimport { environment } from \"@env/environment\";\n\nimport { ResponseItem } from \"../../responses/responses.model\";\nimport { ResponseAclData, DataAclModel } from \"./acl.model\";\nimport { W3AclService } from \"./acl.service\";\n\n@Injectable()\nexport class W3RequestAclService {\n  constructor(private http: HttpClient, private acl: W3AclService) {}\n\n  findData(): Observable<ResponseAclData> {\n    return this.http\n      .get<ResponseItem<ResponseAclData>>(\n        `${environment.URL_API}/rapi/guardian/me/acl`\n      )\n      .pipe(map(result => result.data));\n  }\n\n  allPerms(): string[] {\n    return [\"\"];\n  }\n\n  refresh(): void {\n    // : Observable<ResponseAclData>\n    console.log(\"W3RequestAcl.refresh\");\n\n    this.findData()\n      .pipe(tap(data => this.fillAcl(data)))\n      .subscribe();\n  }\n\n  private fillAcl(data: ResponseAclData): void {\n    const newData = {\n      roles: data.roles.map(r => r.name),\n      perms: data.permissions.map(r => r.name)\n    } as DataAclModel;\n\n    this.acl.setData(newData);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "acl",
                        "type": "W3AclService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "acl",
                        "type": "W3AclService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "W3StorageService",
            "id": "injectable-W3StorageService-d08e0dbf53f3e8d9449d386651b2677c",
            "file": "projects/w3/src/lib/apps/storage/storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "def",
                            "type": "any",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "description": "<p>Recupera o valor através da chave</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1209,
                                "end": 1212,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1203,
                                "end": 1208,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1225,
                                "end": 1228,
                                "flags": 0,
                                "escapedText": "def"
                            },
                            "type": "any",
                            "defaultValue": "null",
                            "tagName": {
                                "pos": 1219,
                                "end": 1224,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "description": "<p>Excluir o valor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "description": "<p>Seta um novo valor</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1520,
                                "end": 1523,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1514,
                                "end": 1519,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1536,
                                "end": 1541,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 1530,
                                "end": 1535,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "description": "<p>Service de Storage do W3\nAs configurações de storage podem ser alteradas no método <code>forRoot()</code> e.g</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\">                                           const customConfig: W3Config{\n                                              storage: {\n                                                  drive: &#39;STORAGE&#39;,\n                                                  prefix: &#39;adm&#39;\n                                              }\n                                           }\n\n\n                                           {W3Module.forRoot(customConfig)}</code></pre></div>",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { W3StorageOption } from \"./models\";\nimport { isObject, isString } from \"util\";\n\n/**\n * Service de Storage do W3\n * As configurações de storage podem ser alteradas no método `forRoot()` e.g\n *\n *\n *                                               const customConfig: W3Config{\n *                                                  storage: {\n *                                                      drive: 'STORAGE',\n *                                                      prefix: 'adm'\n *                                                  }\n *                                               }\n *\n *\n *                                               {W3Module.forRoot(customConfig)}\n */\n@Injectable()\nexport class W3StorageService {\n  private drive: Storage;\n\n  constructor(private options: W3StorageOption) {\n    console.log(\"W3StorageService.options->\", options);\n    this.drive =\n      this.options.drive === \"SESSION\" ? sessionStorage : localStorage;\n  }\n\n  /**\n   * retorna a chave com o prefixo\n   * @param k\n   */\n  private key(k): string {\n    return `${this.options.prefix}_${k}`.toLowerCase();\n  }\n\n  /**\n   * Recupera o valor através da chave\n   * @param key\n   * @param def\n   */\n  get(key: string, def: any = null): any {\n    let value = this.drive.getItem(this.key(key)) || def;\n\n    if (value && isString(value) && value.indexOf(\"json:\") === 0) {\n      value = JSON.parse(value.substr(5));\n    }\n\n    return value;\n  }\n\n  /**\n   * Seta um novo valor\n   * @param key\n   * @param value\n   */\n  set(key: string, value: any): any {\n    if (isObject(value)) {\n      value = \"json:\" + JSON.stringify(value);\n    }\n\n    return this.drive.setItem(this.key(key), value);\n  }\n\n  /**\n   * Excluir o valor\n   */\n  remove(key: string): void {\n    this.drive.removeItem(this.key(key));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "W3StorageOption"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "W3StorageOption",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "W3WebSocketService",
            "id": "injectable-W3WebSocketService-ebdd5f9db1eb43d5b08c8881d0a52c8a",
            "file": "projects/w3/src/lib/apps/web-socket/web-socket.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "connect",
                    "args": [
                        {
                            "name": "connectOptions",
                            "type": "Echo"
                        }
                    ],
                    "optional": false,
                    "returnType": "W3WebSocketService",
                    "typeParameters": [],
                    "line": 84,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2100,
                                "end": 2114,
                                "flags": 0,
                                "escapedText": "connectOptions"
                            },
                            "type": "Echo",
                            "tagName": {
                                "pos": 2094,
                                "end": 2099,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Instancia do LaravelEcho</p>\n"
                        }
                    ]
                },
                {
                    "name": "createPrivateChannel",
                    "args": [
                        {
                            "name": "channel",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SwChannel",
                    "typeParameters": [],
                    "line": 122,
                    "description": "<p>Método para criação de novo canal privado</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3044,
                                "end": 3051,
                                "flags": 0,
                                "escapedText": "channel"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3038,
                                "end": 3043,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>nome do canal</p>\n"
                        }
                    ]
                },
                {
                    "name": "createPublicChannel",
                    "args": [
                        {
                            "name": "channel",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SwChannel",
                    "typeParameters": [],
                    "line": 131,
                    "description": "<p>Método para criação de novo canal público</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3269,
                                "end": 3276,
                                "flags": 0,
                                "escapedText": "channel"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3263,
                                "end": 3268,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>nome do canal</p>\n"
                        }
                    ]
                },
                {
                    "name": "joinChannel",
                    "args": [
                        {
                            "name": "channel",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SwInChannel<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 113,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2792,
                                "end": 2799,
                                "flags": 0,
                                "escapedText": "channel"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2786,
                                "end": 2791,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Nome do canal ao qual deseja receber eventos</p>\n"
                        }
                    ]
                },
                {
                    "name": "leave",
                    "args": [
                        {
                            "name": "ch",
                            "type": "SwChannel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>cancelar recebimento de informação do canal</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3495,
                                "end": 3497,
                                "flags": 0,
                                "escapedText": "ch"
                            },
                            "type": "SwChannel",
                            "tagName": {
                                "pos": 3489,
                                "end": 3494,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "description": "<p>Sair de todos os canais</p>\n"
                }
            ],
            "description": "<p>Service para conexões por Socket.\n[Laravel Echo]{@link https://github.com/laravel/echo}</p>\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nimport Echo from \"laravel-echo\";\nimport { environment } from \"@env/environment\";\nimport { W3Notification } from \"./notification\";\nimport { W3StorageService } from \"../storage/storage.service\";\n\ninterface DataObj {\n  [key: string]: any;\n}\n\nexport interface SwChannel {\n  name: string;\n\n  listen(event: string, func: (e) => void): SwChannel;\n  notification(func: (e: W3Notification) => void): SwChannel;\n}\n\nexport interface SwInChannel<T> extends SwChannel {\n  here(func: (users: T[]) => void): SwInChannel<T>;\n\n  joining(func: (user: T) => void): SwInChannel<T>;\n\n  leaving(func: (user: T) => void): SwInChannel<T>;\n\n  listenForWhisper(\n    eventName: string,\n    func: (e: DataObj) => void\n  ): SwInChannel<T>;\n\n  whisper(eventName: string, e: T): SwInChannel<T>;\n}\n\n/**\n * Service para conexões por Socket.\n * [Laravel Echo]{@link https://github.com/laravel/echo}\n *\n *\n *\n * @example\n * const options: Echo = new Echo({\n *                   broadcaster: 'pusher',\n *                   key: 'asd75gasd581as',\n *                   cluster: 'us2',\n *                   authEndpoint: 'myapi/broadcasting/auth',\n *                   logToConsole: true,\n *                   auth: {\n *                       headers: {\n *                       Authorization: 'Bearer ...'\n *                   }\n *                 }\n * });\n *\n * ngOnInit(){\n *                   this.socket.connect(options);\n *\n *                   const channel = this.socket.createPrivateChannel(`MeuCanal.User.${userId}`)\n *\n *                   channel.listen(`MeuCanal.User.${userId}`, e => {\n *                                      console.log('novo evento')\n *                   })\n *\n *                   channel.notification(n: W3Notification) => {\n *                                       console.log('nova notificação')\n *                   }\n *\n * }\n */\n@Injectable()\nexport class W3WebSocketService {\n  private _echo;\n  private _channels: string[] = [];\n\n  constructor(private storage: W3StorageService) {}\n\n  get echo(): any {\n    return this._echo;\n  }\n\n  /**\n   *\n   * @param connectOptions Instancia do LaravelEcho\n   */\n  connect(connectOptions: Echo): W3WebSocketService {\n    if (this._echo) {\n      return this;\n    }\n\n    const token = this.storage.get(\"access_token\");\n\n    // this._echo = new Echo({\n    //     broadcaster: 'pusher',\n    //     key: environment.SOCKET_KEY,\n    //     cluster: environment.SOCKET_CLUSTER,\n    //     authEndpoint: environment.URL_SOCKET + '/broadcasting/auth',\n    //     logToConsole: true,\n    //     auth: {\n    //         headers: {\n    //             Authorization: 'Bearer ' + token\n    //         }\n    //     }\n    // });\n\n    console.log(\"Init Listen->\", this._channels);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param channel Nome do canal ao qual deseja receber eventos\n   */\n  joinChannel<T>(channel: string): SwInChannel<T> {\n    this._channels.push(channel);\n    return this._echo.join(channel);\n  }\n\n  /**\n   * Método para criação de novo canal privado\n   * @param channel nome do canal\n   */\n  createPrivateChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.private(channel);\n  }\n\n  /**\n   * Método para criação de novo canal público\n   * @param channel nome do canal\n   */\n  createPublicChannel(channel: string): SwChannel {\n    this._channels.push(channel);\n    return this._echo.channel(channel);\n  }\n\n  /**\n   * cancelar recebimento de informação do canal\n   * @param ch\n   */\n  leave(ch: SwChannel): void {\n    if (this._echo) {\n      this._echo.leave(ch.name);\n    }\n  }\n\n  /**\n   * Sair de todos os canais\n   */\n  reset(): void {\n    if (this._echo) {\n      this._channels.map(ch => this._echo.leave(ch));\n      this._echo = null;\n      this._channels = [];\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "W3StorageService"
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "W3StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "jsdoctags": [
                {
                    "pos": 922,
                    "end": 932,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 922,
                        "end": 923,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 923,
                        "end": 930,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "const options: Echo = new Echo({\n       broadcaster: 'pusher',\n       key: 'asd75gasd581as',\n       cluster: 'us2',\n       authEndpoint: 'myapi/broadcasting/auth',\n       logToConsole: true,\n       auth: {\n           headers: {\n           Authorization: 'Bearer ...'\n       }\n     }\n});\n\nngOnInit(){\n       this.socket.connect(options);\n\n       const channel = this.socket.createPrivateChannel(`MeuCanal.User.${userId}`)\n\n       channel.listen(`MeuCanal.User.${userId}`, e => {\n                          console.log('novo evento')\n       })\n\n       channel.notification(n: W3Notification) => {\n                           console.log('nova notificação')\n       }\n\n}"
                }
            ],
            "accessors": {
                "echo": {
                    "name": "echo",
                    "getSignature": {
                        "name": "echo",
                        "type": "any",
                        "returnType": "any",
                        "line": 76
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AbstractSearchParams",
            "id": "class-AbstractSearchParams-44b3cf71605a3f5cc58b7c4a233beda5",
            "file": "projects/w3/src/lib/helpers/abstract-search-params.ts",
            "type": "class",
            "sourceCode": "import { w3IsEmpty, w3CheckIsNumeric } from \"./utils\";\n\n/**\n * Helper para consultas\n */\nexport abstract class AbstractSearchParams {\n  page = 1;\n  paginate = 15;\n  include: string;\n  q: string;\n  sort: string;\n\n  vl_column: string;\n  vl_start: string;\n  vl_end: string;\n\n  dt_column: string;\n  dt_start: string;\n  dt_end: string;\n\n  constructor(params?: any) {\n    if (params) {\n      this.merge(params);\n    }\n  }\n\n  /**\n   * Atrbutos que vem na URL q devem ser transformados em ARRAY\n   */\n  protected attrsArrayable(): string[] {\n    return [];\n  }\n\n  merge(params): void {\n    Object.keys(params).forEach(k => {\n      this[k] = params[k];\n    });\n  }\n\n  getData(): any {\n    return Object.keys(this).reduce((r, k) => {\n      if (!w3IsEmpty(this[k])) {\n        r[k] = this[k];\n      }\n\n      return r;\n    }, {});\n  }\n\n  /**\n   * Retorna o objeto q sera realizado a consulta e tmb setado na URL\n   */\n  getQueryParams(): any {\n    const data = this.getData();\n\n    return Object.keys(data).reduce((r, k) => {\n      r[k] = this.filterValue(data[k]);\n      return r;\n    }, data);\n  }\n\n  /**\n   * RECEBE os parametros ainda em string passado pela URL\n   *\n   * @param params\n   */\n  setQueryParams(params): this {\n    this.attrsArrayable().forEach(k => {\n      if (typeof params[k] === \"string\") {\n        this[k] = params[k]\n          .split(\"|\")\n          .map(d => w3CheckIsNumeric(d))\n          .filter(d => d);\n      }\n    });\n\n    return this;\n  }\n\n  protected filterValue(v: any): any {\n    if (w3IsEmpty(v)) {\n      return null;\n    } else if (Array.isArray(v)) {\n      return v.join(\"|\");\n    } else {\n      return v;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "params",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "dt_column",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dt_end",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dt_start",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "include",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "paginate",
                    "defaultValue": "15",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "q",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sort",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "vl_column",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "vl_end",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "vl_start",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "description": "<p>Helper para consultas</p>\n",
            "rawdescription": "Helper para consultas",
            "methods": [
                {
                    "name": "attrsArrayable",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 30,
                    "description": "<p>Atrbutos que vem na URL q devem ser transformados em ARRAY</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "filterValue",
                    "args": [
                        {
                            "name": "v",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "getQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "description": "<p>Retorna o objeto q sera realizado a consulta e tmb setado na URL</p>\n"
                },
                {
                    "name": "merge",
                    "args": [
                        {
                            "name": "params",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setQueryParams",
                    "args": [
                        {
                            "name": "params",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 67,
                    "description": "<p>RECEBE os parametros ainda em string passado pela URL</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1170,
                                "end": 1176,
                                "flags": 0,
                                "escapedText": "params"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1164,
                                "end": 1169,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MyHttpErrorResponse",
            "id": "class-MyHttpErrorResponse-3f8b897065db2261ae4876682385fb85",
            "file": "projects/w3/src/lib/responses/my-http-error.ts",
            "type": "class",
            "sourceCode": "import { HttpHeaders, HttpResponseBase } from \"@angular/common/http\";\nimport { Response40x } from \"./responses.model\";\n\nexport class MyHttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = \"HttpErrorResponse\";\n  readonly message: string;\n  readonly messageHttp: string;\n  readonly error: any | null;\n  readonly response: Response40x | null;\n  readonly data: object | null;\n  readonly code: string | null;\n  readonly validation: { [key: string]: string[] };\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, \"Unknown Error\");\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.messageHttp = `Http failure during parsing for ${init.url ||\n        \"(unknown url)\"}`;\n    } else {\n      this.messageHttp = `Http failure response for ${init.url ||\n        \"(unknown url)\"}: ${init.status} ${init.statusText}`;\n    }\n\n    this.error = init.error || null;\n\n    this.response = init.error;\n\n    if (this.response) {\n      this.data = this.response.data;\n\n      if (this.response.error) {\n        this.code = this.response.error.code;\n        this.message = this.response.message;\n        this.validation = this.response.error.validation;\n      } else {\n        this.code = this.response.status;\n        this.message = this.messageHttp;\n      }\n    }\n  }\n\n  getAllValidations(): string[] {\n    if (!this.validation) {\n      return [];\n    }\n\n    return Object.getOwnPropertyNames(this.validation).reduce(\n      (map: any, key: string) => {\n        return map.concat(this.validation[key]);\n      },\n      []\n    );\n  }\n\n  getFirstValidation(): string {\n    return this.getAllValidations()[0] || \"\";\n  }\n\n  getListValidations(): string {\n    return this.getAllValidations().join(\". \");\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "literal type"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "code",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "data",
                    "type": "object | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "error",
                    "type": "any | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "messageHttp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "\"HttpErrorResponse\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "ok",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Errors are never okay, even when the status code is in the 2xx success range.</p>\n",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "response",
                    "type": "Response40x | null",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "validation",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllValidations",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "getFirstValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "getListValidations",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "extends": "HttpResponseBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Error"
            ]
        },
        {
            "name": "ValueAccessorBase",
            "id": "class-ValueAccessorBase-8aec2ea1ce9ac0d6e5144bbce4b20922",
            "file": "projects/w3/src/lib/helpers/value-accessor.ts",
            "type": "class",
            "sourceCode": "import {ControlValueAccessor} from '@angular/forms';\n\n/**\n * Example:\n *\n @Component({\n    selector: 'je-md-input-view',\n    templateUrl: './je-md-input-view.component.html',\n    styleUrls: ['./je-md-input-view.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => JeMdInputViewComponent),\n            multi: true\n        }\n    ]\n })\n export class JeMdInputViewComponent extends ValueAccessorBase<string> implements OnInit {\n\n     demoUpdate():void{\n        this.value = \"sdsdf\";\n     }\n\n }\n */\nexport abstract class ValueAccessorBase<T> implements ControlValueAccessor {\n\n    private innerValue: T;\n\n    onChange = (value: T) => {\n\n    };\n\n    onTouched = () => {\n    };\n\n    get value(): T {\n        return this.innerValue;\n    }\n\n    set value(value: T) {\n        if (this.innerValue !== value) {\n            this.innerValue = value;\n            // informação da view para o  controller\n            this.onChange(value);\n            this.onChangeValue(value);\n            this.onTouched();\n        }\n    }\n\n    /**\n     * methodo chamado em toda alteracao do valor, indicado para sobcrever ela no componente instanciado\n     *\n     * @param value\n     */\n    onChangeValue(value: T): void {\n\n    }\n\n    /**\n     * responsavel por tratar as alterações feitas de fora\n     * @param value\n     */\n    writeValue(value: T): void {\n        this.innerValue = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n}\n",
            "properties": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "description": "<p>Example:</p>\n",
            "rawdescription": "Example:",
            "methods": [
                {
                    "name": "onChangeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "description": "<p>methodo chamado em toda alteracao do valor, indicado para sobcrever ela no componente instanciado</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1217,
                                "end": 1222,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "T",
                            "tagName": {
                                "pos": 1211,
                                "end": 1216,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "description": "<p>responsavel por tratar as alterações feitas de fora</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1356,
                                "end": 1361,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "T",
                            "tagName": {
                                "pos": 1350,
                                "end": 1355,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "jsdoctags": [
                {
                    "pos": 74,
                    "end": 84,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 74,
                        "end": 75,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 75,
                        "end": 84,
                        "flags": 0,
                        "escapedText": "Component"
                    },
                    "comment": "({\nselector: 'je-md-input-view',\ntemplateUrl: './je-md-input-view.component.html',\nstyleUrls: ['./je-md-input-view.component.scss'],\nproviders: [\n{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => JeMdInputViewComponent),\n  multi: true\n}\n]\n})\nexport class JeMdInputViewComponent extends ValueAccessorBase<string> implements OnInit {\ndemoUpdate():void{\nthis.value = \"sdsdf\";\n}\n}"
                }
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T",
                        "line": 37
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "W3AuthAbstractService",
            "id": "class-W3AuthAbstractService-b39b806d4222171c869da0a21436ff41",
            "file": "projects/w3/src/lib/apps/auth/auth-abstract.service.ts",
            "type": "class",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { of } from \"rxjs/internal/observable/of\";\nimport { catchError, map, tap } from \"rxjs/operators\";\n\n//https://www.monkeyuser.com/2018/code-reuse/\nimport * as momentImported from \"moment\";\nconst moment = momentImported;\n\nimport { environment } from \"@env/environment\";\nimport { W3StorageService } from \"../storage/storage.service\";\nimport { W3MeService } from \"./me.service\";\nimport { UserModel } from \"./auth.model\";\n\n/**\n * Essential service for authentication\n *\n */\nexport abstract class W3AuthAbstractService {\n  /**\n   * Headers for auth request's\n   */\n  protected _headers = {};\n\n  /**\n   *\n   * @param http Angular common HttpClientModule\n   * @param storage Service de Storage do W3\n   * @param me Service de controlo do usuário logado do W3\n   */\n  protected constructor(\n    protected http: HttpClient,\n    protected storage: W3StorageService,\n    protected me: W3MeService\n  ) {}\n\n  public abstract login(\n    email: string,\n    password: string\n  ): Observable<UserModel | any>;\n\n  /**\n   * Url de refresh token (deve ser sobreescrita), e.g `.../rapi/guardian/auth/refresh`\n   */\n  public abstract getUrlRefreshToken(): string;\n\n  /**\n   * Url para expirar o token\n   */\n  public getUrlRevokeToken(): string {\n    return `${environment.URL_API}/rapi/guardian/auth/logout`;\n  }\n\n  /**\n   * Check, if user already authorized.\n   *\n   * Should return Observable with true or false values\n   */\n  public isAuthorized(): Observable<boolean> {\n    // const isAuthorized = this.isLoggedIn();\n    const isAuthorized: boolean = !!this.storage.get(\"access_token\");\n    return of(isAuthorized);\n  }\n\n  /**\n   * Get access token\n   *\n   * Should return access token in Observable from e.g.\n   * localStorage\n   */\n  public getAccessToken(): Observable<string> {\n    const accessToken: string = this.storage.get(\"access_token\");\n    return of(accessToken);\n  }\n\n  /**\n   * Function, that should perform refresh token verifyTokenRequest\n   *\n   * Should be successfully completed so interceptor\n   * can execute pending requests or retry original one\n   */\n  public refreshToken(): Observable<any> {\n    const refreshToken: string = this.storage.get(\"access_token\");\n    const options = {\n      headers: { Authorization: `Bearer ${refreshToken}` }\n    };\n\n    return this.http.post(this.getUrlRefreshToken(), null, options).pipe(\n      tap(res => this.setSession(res)),\n      catchError(err => {\n        this.forceLogout();\n        return err;\n      })\n    );\n  }\n\n  public forceLogout(): void {\n    this.clearToken();\n    window.location.href = \"/auth/login\";\n  }\n\n  /**\n   * Function, checks response of failed request to determine,\n   * whether token be refreshed or not.\n   *\n   * Essentially checks status\n   */\n  public refreshShouldHappen(response: HttpErrorResponse): boolean {\n    console.log(\"refreshShouldHappen\", response);\n    return response.status === 401 && this.storage.get(\"access_token\") !== null;\n  }\n\n  /**\n   * Verify that outgoing request is refresh-token,\n   * so interceptor won't intercept this request\n   */\n  public verifyTokenRequest(url: string): boolean {\n    return url.endsWith(\"auth/refresh\");\n  }\n\n  /**\n   * Seta na sessão do navegador dados de auth e.g token, expires_at....\n   * @param authResult Result do login\n   */\n  protected setSession(authResult): void {\n    const expiresAt = moment().add(authResult.data.expires_in, \"second\");\n\n    this.storage.set(\"access_token\", authResult.data.access_token);\n    this.storage.set(\"expires_at\", JSON.stringify(expiresAt.valueOf()));\n\n    this.me.refresh();\n  }\n\n  /**\n   * Método 'Esqueci minha senha' (deve ser sobreescrito)\n   * @param data\n   */\n  public remind(data: any): Observable<any> {\n    return of(null);\n  }\n\n  /**\n   * Método 'Recuperar senha' (deve ser sobreescrito)\n   * @param data\n   */\n  public reset(data: any): Observable<any> {\n    return of(null);\n  }\n\n  /**\n   * Método que realiza o logout e limpa a sessão\n   */\n  public logout(): Observable<any> {\n    const refreshToken: string = this.storage.get(\"access_token\");\n    const options = {\n      headers: { Authorization: `Bearer ${refreshToken}` }\n    };\n\n    return this.http.post(this.getUrlRevokeToken(), null, options).pipe(\n      map(resp => {\n        this.me.clear();\n        this.clearToken();\n        return resp;\n      })\n    );\n  }\n\n  /**\n   * Método que remove os dados da sessão\n   */\n  public clearToken(): void {\n    this.storage.remove(\"access_token\");\n    this.storage.remove(\"expires_at\");\n  }\n\n  /**\n   * Verifica se o usuário está logado\n   */\n  public isLoggedIn(): boolean {\n    return moment().isBefore(this.getExpiration());\n  }\n\n  /**\n   * Verifica se o usuário está logado\n   * @see isLoggedIn\n   */\n  public isLoggedOut(): boolean {\n    return !this.isLoggedIn();\n  }\n\n  /**\n   * Recupera o time de expiração do token\n   */\n  public getExpiration(): any {\n    const expiration = this.storage.get(\"expires_at\");\n    const expiresAt = JSON.parse(expiration);\n    return moment(expiresAt);\n  }\n\n  /**\n   * Add token to headers, dependent on server\n   * set-up, by default adds a bearer token.\n   * Called by interceptor.\n   *\n   * To change behavior, override this method.\n   */\n  public getHeaders(token: string): { [p: string]: string | string[] } {\n    this._headers[\"Authorization\"] = `Bearer ${token}`;\n    return this._headers;\n  }\n\n  /**\n   *\n   * @param key nome do header. e.g `Content-Type`\n   * @param value valor do header. e.g `application/json`\n   */\n  public addHeader(key, value): void {\n    if (value === null || value === \"\") {\n      delete this._headers[key];\n    } else {\n      this._headers[key] = value;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "storage",
                        "type": "W3StorageService"
                    },
                    {
                        "name": "me",
                        "type": "W3MeService"
                    }
                ],
                "line": 24,
                "modifierKind": [
                    113
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 722,
                            "end": 726,
                            "flags": 0,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "tagName": {
                            "pos": 716,
                            "end": 721,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Angular common HttpClientModule</p>\n"
                    },
                    {
                        "name": {
                            "pos": 771,
                            "end": 778,
                            "flags": 0,
                            "escapedText": "storage"
                        },
                        "type": "W3StorageService",
                        "tagName": {
                            "pos": 765,
                            "end": 770,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Service de Storage do W3</p>\n"
                    },
                    {
                        "name": {
                            "pos": 816,
                            "end": 818,
                            "flags": 0,
                            "escapedText": "me"
                        },
                        "type": "W3MeService",
                        "tagName": {
                            "pos": 810,
                            "end": 815,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Service de controlo do usuário logado do W3</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "_headers",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "<p>Headers for auth request&#39;s</p>\n",
                    "line": 24,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "description": "<p>Essential service for authentication</p>\n",
            "rawdescription": "Essential service for authentication",
            "methods": [
                {
                    "name": "addHeader",
                    "args": [
                        {
                            "name": "key",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "description": "",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5453,
                                "end": 5456,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 5447,
                                "end": 5452,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>nome do header. e.g <code>Content-Type</code></p>\n"
                        },
                        {
                            "name": {
                                "pos": 5504,
                                "end": 5509,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 5498,
                                "end": 5503,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>valor do header. e.g <code>application/json</code></p>\n"
                        }
                    ]
                },
                {
                    "name": "clearToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "description": "<p>Método que remove os dados da sessão</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "forceLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 72,
                    "description": "<p>Get access token</p>\n<p>Should return access token in Observable from e.g.\nlocalStorage</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getExpiration",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "description": "<p>Recupera o time de expiração do token</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getHeaders",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 208,
                    "description": "<p>Add token to headers, dependent on server\nset-up, by default adds a bearer token.\nCalled by interceptor.</p>\n<p>To change behavior, override this method.</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUrlRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "description": "<p>Url de refresh token (deve ser sobreescrita), e.g <code>.../rapi/guardian/auth/refresh</code></p>\n",
                    "modifierKind": [
                        114,
                        117
                    ]
                },
                {
                    "name": "getUrlRevokeToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "description": "<p>Url para expirar o token</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 60,
                    "description": "<p>Check, if user already authorized.</p>\n<p>Should return Observable with true or false values</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 180,
                    "description": "<p>Verifica se o usuário está logado</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isLoggedOut",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 188,
                    "description": "<p>Verifica se o usuário está logado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": []
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel | any>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 154,
                    "description": "<p>Método que realiza o logout e limpa a sessão</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refreshShouldHappen",
                    "args": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "description": "<p>Function, checks response of failed request to determine,\nwhether token be refreshed or not.</p>\n<p>Essentially checks status</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>Function, that should perform refresh token verifyTokenRequest</p>\n<p>Should be successfully completed so interceptor\ncan execute pending requests or retry original one</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "remind",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 139,
                    "description": "<p>Método &#39;Esqueci minha senha&#39; (deve ser sobreescrito)</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3732,
                                "end": 3736,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 3726,
                                "end": 3731,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 147,
                    "description": "<p>Método &#39;Recuperar senha&#39; (deve ser sobreescrito)</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3887,
                                "end": 3891,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 3881,
                                "end": 3886,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setSession",
                    "args": [
                        {
                            "name": "authResult",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "description": "<p>Seta na sessão do navegador dados de auth e.g token, expires_at....</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3335,
                                "end": 3345,
                                "flags": 0,
                                "escapedText": "authResult"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 3329,
                                "end": 3334,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Result do login</p>\n"
                        }
                    ]
                },
                {
                    "name": "verifyTokenRequest",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "description": "<p>Verify that outgoing request is refresh-token,\nso interceptor won&#39;t intercept this request</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "W3MessagesBaseResponseService",
            "id": "class-W3MessagesBaseResponseService-8e75e414666f9f60895400d26bcd668e",
            "file": "projects/w3/src/lib/interceptor/messages-base-response.service.ts",
            "type": "class",
            "sourceCode": "import { ToastrService } from \"ngx-toastr\";\nimport * as _ from \"lodash\";\n\n/**\n * https://github.com/scttcper/ngx-toastr\n */\n\n/**\n * Classe Abstrata para mensagens do toast\n */\nexport abstract class W3MessagesBaseResponseService {\n  protected constructor(protected _toast: ToastrService) {}\n\n  respondOffline(): void {\n    this._toast.warning(\"Sem conexão com a internet!\");\n  }\n\n  respondOk(data): void {\n    if (!data.message) {\n      return;\n    }\n\n    switch (data.status) {\n      case \"success\":\n        this._toast.success(data.message);\n        break;\n      case \"error\":\n        this._toast.error(data.message);\n        break;\n      default:\n        this._toast.info(data.message);\n    }\n  }\n\n  respondNotFound(data): void {\n    if (data.status === \"error\" && data.message) {\n      this._toast.error(data.message);\n    }\n  }\n\n  respondValidation(data): void {\n    if (!data.error) {\n      return;\n    }\n\n    let error = \"\";\n\n    if (data.error.validation) {\n      error = \"<ul>\";\n\n      _.forEach(data.error.validation, (msg: string) => {\n        error += \"<li>\" + msg + \"</li>\";\n      });\n\n      error += \"</ul>\";\n    }\n\n    this._toast.error(error, data.message);\n  }\n\n  /**\n   * // Usuario não possui essa permissão CAM/ROLE\n   * @param data\n   */\n  respondPermissionRequired(data): void {\n    const msg =\n      data.error && data.message\n        ? data.message\n        : \"Seu usuário não possui acesso!\";\n\n    this._toast.warning(msg);\n  }\n\n  respondUnauthorized(data): void {\n    const msg =\n      data.error && data.message ? data.message : \"Favor efetuar login!\";\n\n    this._toast.info(msg);\n  }\n\n  respondError(data): void {\n    if (data.error && data.message) {\n      this._toast.error(data.message);\n    } else {\n      this.respondInternalError(data);\n    }\n  }\n\n  respondInternalError(error): void {\n    this._toast.error(\"Falha ao se comunicar com o servidor!\");\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_toast",
                        "type": "ToastrService"
                    }
                ],
                "line": 11,
                "modifierKind": [
                    113
                ],
                "jsdoctags": [
                    {
                        "name": "_toast",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "description": "<p>https://github.com/scttcper/ngx-toastr</p>\n",
            "rawdescription": "https://github.com/scttcper/ngx-toastr",
            "methods": [
                {
                    "name": "respondError",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondInternalError",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondNotFound",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondOffline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "respondOk",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondPermissionRequired",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "description": "<p>// Usuario não possui essa permissão CAM/ROLE</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1247,
                                "end": 1251,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1241,
                                "end": 1246,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "respondUnauthorized",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "respondValidation",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "W3Notification",
            "id": "class-W3Notification-e218e75a849c7dd8cc2ff88bc507b0c6",
            "file": "projects/w3/src/lib/apps/web-socket/notification.ts",
            "type": "class",
            "sourceCode": "export class W3Notification {\n    id?: number;\n    type?: string;\n    title?: string;\n    message?: string;\n    meta?: any;\n    read_at?: string;\n    created_at?: string;\n    updated_at?: string;\n\n    /**\n     * Constructor\n     *\n     * @param obj\n     */\n    constructor(obj?: any) {\n        if (!obj) {\n            return;\n        }\n\n        this.id = obj.id || null;\n        this.type = obj.type || null;\n        this.title = obj.title || null;\n        this.message = obj.message || null;\n        this.meta = obj.meta || null;\n        this.read_at = obj.read_at || null;\n        this.created_at = obj.created_at || null;\n        this.updated_at = obj.updated_at || null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "args": [
                    {
                        "name": "obj",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 245,
                            "end": 248,
                            "flags": 0,
                            "escapedText": "obj"
                        },
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "pos": 239,
                            "end": 244,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "properties": [
                {
                    "name": "created_at",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "meta",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "read_at",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "updated_at",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "W3StorageOption",
            "id": "class-W3StorageOption-9dfb5df4219d3cb73c35a17b49d0c94a",
            "file": "projects/w3/src/lib/apps/storage/models.ts",
            "type": "class",
            "sourceCode": "export class W3StorageOption {\n    prefix: string;\n    drive: 'SESSION' | 'STORAGE';\n}\n\nexport const w3StorageByLocalSession: W3StorageOption = {\n    prefix: 'app',\n    drive: 'SESSION'\n};\n\nexport const w3StorageByLocalStorage: W3StorageOption = {\n    prefix: 'app',\n    drive: 'STORAGE'\n};\n",
            "properties": [
                {
                    "name": "drive",
                    "type": "\"SESSION\" | \"STORAGE\"",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "prefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "W3AclCanDirective",
            "id": "directive-W3AclCanDirective-b9dafec0189ac18b6f909d2f47f8e30d",
            "file": "projects/w3/src/lib/apps/acl/directives/w3-acl-can.directive.ts",
            "type": "directive",
            "description": "<p>Passe um array de permissões que serão parseadas com as permissões do usuário logado, e verificar se deve ou não mostrar aquele elemento.\nEx:</p>\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef\n} from \"@angular/core\";\nimport { W3AclService } from \"../acl.service\";\nimport { Subscription } from \"rxjs\";\n\n/**\n * Passe um array de permissões que serão parseadas com as permissões do usuário logado, e verificar se deve ou não mostrar aquele elemento.\n * Ex:\n * @example\n * <element *w3AclCan=\"['read', 'delete']\"></element>\n *\n */\n@Directive({\n  selector: \"[w3AclCan]\"\n})\nexport class W3AclCanDirective implements OnInit, OnDestroy {\n  /**\n   *@ignore\n   */\n  private _last: boolean;\n\n  /**\n   * @ignore\n   */\n  private _perms: any;\n\n  /**\n   * @ignore\n   */\n  private _subject: Subscription;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private acl: W3AclService,\n    private viewContainer: ViewContainerRef\n  ) {}\n\n  /**\n   *  Array de permissões\n   */\n  @Input()\n  set w3AclCan(val: string[]) {\n    this._perms = val;\n    this.check();\n  }\n\n  /**\n   * Faz um subscribe as mudanças de permissões do user logado\n   */\n  ngOnInit(): void {\n    this._subject = this.acl.onChange$.subscribe(() => this.check());\n  }\n\n  ngOnDestroy(): void {\n    console.log(\"W3AclCanDirective.ngOnDestroy\");\n    this._subject.unsubscribe();\n  }\n\n  /**\n   * Verifica as permissões\n   */\n  private check(): void {\n    const newStatus = this.acl.can(this._perms);\n\n    if (this._last !== newStatus) {\n      this._last = newStatus;\n      this.updateView();\n    }\n  }\n\n  /**\n   * Atualizar a visualização do elemento conforme permissões\n   */\n  private updateView(): void {\n    if (this._last) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n}\n",
            "selector": "[w3AclCan]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "w3AclCan",
                    "description": "<p>Array de permissões</p>\n",
                    "line": 48,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "jsdoctags": [
                {
                    "pos": 352,
                    "end": 362,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 352,
                        "end": 353,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 353,
                        "end": 360,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<element *w3AclCan=\"['read', 'delete']\"></element>"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "acl",
                        "type": "W3AclService"
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "acl",
                        "type": "W3AclService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "w3AclCan": {
                    "name": "w3AclCan",
                    "setSignature": {
                        "name": "w3AclCan",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "description": "<p>Array de permissões</p>\n",
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "W3MatConfirmDialogComponent",
            "id": "component-W3MatConfirmDialogComponent-534721a2a1109626d77e2f69b12c99c2",
            "file": "projects/w3/src/lib/apps/notification/components/w3-mat-confirm-dialog/w3-mat-confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rapi-w3-confirm-dialog",
            "styleUrls": [
                "./w3-mat-confirm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./w3-mat-confirm-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "confirmTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<W3MatConfirmDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "typeClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Dialog para confirmação simples</p>\n",
            "rawdescription": "Dialog para confirmação simples",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { MatDialogRef } from \"@angular/material\";\n\n/**\n * Dialog para confirmação simples\n *\n * @example\n * const confirmDialogRef = this.dialog.open(W3MatConfirmDialogComponent, {\n *               disableClose: false\n * });\n *\n * confirmDialogRef.componentInstance.confirmMessage = message;\n * confirmDialogRef.componentInstance.confirmTitle = title;\n * confirmDialogRef.componentInstance.typeClass = typeClass;\n *\n * confirmDialogRef.afterClosed().pipe(\n *               tap((result) => {\n *                  if (result)\n *                      //Accepted\n *                  else\n *                      //Not accepted\n *               },\n *  );\n */\n@Component({\n  selector: \"rapi-w3-confirm-dialog\",\n  templateUrl: \"./w3-mat-confirm-dialog.component.html\",\n  styleUrls: [\"./w3-mat-confirm-dialog.component.scss\"]\n})\nexport class W3MatConfirmDialogComponent {\n  public confirmMessage: string;\n  public confirmTitle: string;\n  public typeClass: string;\n\n  constructor(public dialogRef: MatDialogRef<W3MatConfirmDialogComponent>) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\n  .mat-dialog-title{\n    margin: 0;\n  }\n}\n",
                    "styleUrl": "./w3-mat-confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 139,
                    "end": 149,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 139,
                        "end": 140,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 140,
                        "end": 147,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "const confirmDialogRef = this.dialog.open(W3MatConfirmDialogComponent, {\n   disableClose: false\n});\n\nconfirmDialogRef.componentInstance.confirmMessage = message;\nconfirmDialogRef.componentInstance.confirmTitle = title;\nconfirmDialogRef.componentInstance.typeClass = typeClass;\n\nconfirmDialogRef.afterClosed().pipe(\n   tap((result) => {\n      if (result)\n          //Accepted\n      else\n          //Not accepted\n   },\n);"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<W3MatConfirmDialogComponent>"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<W3MatConfirmDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"dialog-content-wrapper dialog-form-project mr-16 ml-16 mt-16\" style=\"height: 160px;\">\n\n    <div matDialogTitle fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"height: 32px;\">\n      <h1 matDialogTitle>{{confirmTitle}}</h1>\n    </div>\n\n  <div mat-dialog-content class=\"pl-24 pr-24 m-0\" fusePerfectScrollbar>\n    {{confirmMessage}}\n  </div>\n  <div mat-dialog-actions class=\"pt-24\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <button mat-button (click)=\"dialogRef.close(false)\">Cancelar</button>\n    <button mat-button mat-raised-button [color]=\"typeClass\" class=\" mr-16\" (click)=\"dialogRef.close(true)\">Confirmar</button>\n  </div>\n</div>\n"
        },
        {
            "name": "W3PaginatorComponent",
            "id": "component-W3PaginatorComponent-5106dfa91ebc757d03b56e466ce865c6",
            "file": "projects/w3/src/lib/components/w3-paginator/w3-paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rapi-w3-paginator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./w3-paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pagination",
                    "description": "<p>Objeto de paginação</p>\n",
                    "line": 29,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>Emmite toda vez que algum valor é alterado</p>\n",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "{\n    total: 0,\n    page: 0,\n    per_page: 0\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "paginator",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Componente de paginação</p>\n",
            "rawdescription": "Componente de paginação",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from \"@angular/core\";\nimport { MatPaginator } from \"@angular/material\";\n\n/**\n * Componente de paginação\n */\n@Component({\n  selector: \"rapi-w3-paginator\",\n  templateUrl: \"./w3-paginator.component.html\"\n})\nexport class W3PaginatorComponent implements OnChanges {\n  public data = {\n    total: 0,\n    page: 0,\n    per_page: 0\n  };\n\n  /**\n   * Objeto de paginação\n   */\n  @Input() pagination: any;\n\n  /**\n   * Emmite toda vez que algum valor é alterado\n   */\n  @Output() onChange = new EventEmitter<any>();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const pagination = { ...changes.pagination.currentValue };\n    pagination.page = pagination.page > 0 ? pagination.page - 1 : 0;\n    this.data = Object.assign({}, this.data, pagination);\n  }\n\n  changePage(event): void {\n    const data = {\n      ...event,\n      page: event.pageIndex + 1\n    };\n\n    this.onChange.emit(data);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-paginator *ngIf=\"pagination\" #paginator\n               [length]=\"data.total\"\n               (page)=\"changePage($event)\"\n               [pageIndex]=\"data.page\"\n               [pageSize]=\"data.per_page\"\n               [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n"
        }
    ],
    "modules": [
        {
            "name": "W3AclModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "W3AclCanDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "W3NotificationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "W3AclCanDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "W3AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "W3AuthInterceptor"
                        },
                        {
                            "name": "W3AuthInterceptor"
                        },
                        {
                            "name": "W3MeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "W3Module",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "W3PaginatorComponent"
                        },
                        {
                            "name": "W3PhonePipe"
                        },
                        {
                            "name": "W3WeekDayPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "W3PaginatorComponent"
                        },
                        {
                            "name": "W3PhonePipe"
                        },
                        {
                            "name": "W3WeekDayPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "W3NotificationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "W3NotificationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "W3MatConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "W3MatConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WebSocketModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "W3WebSocketService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  URL_API: \"\"\n}"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/apps/auth/auth-abstract.service.ts",
                "type": "",
                "defaultValue": "momentImported"
            },
            {
                "name": "ptBrRangeLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/components/w3-paginator/pt-br-paginator-intl.ts",
                "type": "",
                "defaultValue": "(page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) {\n        return `0 de ${length}`;\n    }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} de ${length}`;\n}"
            },
            {
                "name": "skipAuthorization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/index.ts",
                "type": "object",
                "defaultValue": "{headers: {skipAuthorization: '1'}}"
            },
            {
                "name": "skipToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/index.ts",
                "type": "object",
                "defaultValue": "{headers: {skipToast: '1'}}"
            },
            {
                "name": "skipToastAndAuthorization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/index.ts",
                "type": "object",
                "defaultValue": "{headers: {skipToast: '1', skipAuthorization: '1'}}"
            },
            {
                "name": "W3_AUTH_SERVICE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/apps/auth/tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken('W3_AUTH_SERVICE')"
            },
            {
                "name": "W3_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/w3.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken('w3CustomConfig')"
            },
            {
                "name": "W3_MESSAGE_RESPONSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/index.ts",
                "type": "",
                "defaultValue": "new InjectionToken('W3_MESSAGE_RESPONSE')"
            },
            {
                "name": "W3_PROTECTED_FALLBACK_PAGE_URI",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/apps/auth/tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken('W3_PROTECTED_FALLBACK_PAGE_URI')"
            },
            {
                "name": "W3_PUBLIC_FALLBACK_PAGE_URI",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/apps/auth/tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken('W3_PUBLIC_FALLBACK_PAGE_URI')"
            },
            {
                "name": "w3ConfigDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/w3.config.ts",
                "type": "W3Config",
                "defaultValue": "{\n    storage: w3StorageByLocalStorage\n}"
            },
            {
                "name": "W3ConfigToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/index.ts",
                "type": "object",
                "defaultValue": "{\n    closeButton: true,\n    timeOut: 5500,\n    enableHtml: true,\n    positionClass: 'toast-top-right'\n}"
            },
            {
                "name": "w3IsConfirmed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/helpers/rxjs.ts",
                "type": "",
                "defaultValue": "() => {\n    return source => defer(() => {\n\n        return source.pipe(\n            filter((response: W3ConfirmResponse) => response.result === 'OK'),\n            map((response: W3ConfirmResponse) => response.payload)\n        );\n\n    });\n}"
            },
            {
                "name": "w3StorageByLocalSession",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/apps/storage/models.ts",
                "type": "W3StorageOption",
                "defaultValue": "{\n    prefix: 'app',\n    drive: 'SESSION'\n}"
            },
            {
                "name": "w3StorageByLocalStorage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/apps/storage/models.ts",
                "type": "W3StorageOption",
                "defaultValue": "{\n    prefix: 'app',\n    drive: 'STORAGE'\n}"
            },
            {
                "name": "W3Variables",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/w3/src/lib/index.ts",
                "type": "object",
                "defaultValue": "{\n\n    /**\n     * MASKS\n     *\n     * chamar TextMaskModule no módulo a ser usado\n     * exemplo: [textMask]=\"{mask: mask.tel}\"\n     * orgem: https://github.com/text-mask/text-mask\n     */\n    mask: {\n        tel: ['(', /[1-9]/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n        cep: ['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]\n    }\n}"
            }
        ],
        "functions": [
            {
                "name": "enumToArray",
                "file": "projects/w3/src/lib/helpers/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Converte Enum para Array</p>\n",
                "args": [
                    {
                        "name": "_enum",
                        "type": ""
                    }
                ],
                "returnType": "EnumItem[]",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 172,
                            "end": 177,
                            "flags": 0,
                            "escapedText": "_enum"
                        },
                        "type": "",
                        "tagName": {
                            "pos": 166,
                            "end": 171,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "enumToArrayWithLabels",
                "file": "projects/w3/src/lib/helpers/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Converte Enum para Array usado seus labels como valor</p>\n",
                "args": [
                    {
                        "name": "_enum",
                        "type": ""
                    },
                    {
                        "name": "labels"
                    }
                ],
                "returnType": "EnumItem[]",
                "jsdoctags": [
                    {
                        "name": "_enum",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "labels",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPtBrPaginatorIntl",
                "file": "projects/w3/src/lib/components/w3-paginator/pt-br-paginator-intl.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "jsonEqual",
                "file": "projects/w3/src/lib/helpers/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Compara jsons</p>\n",
                "args": [
                    {
                        "name": "current",
                        "type": ""
                    },
                    {
                        "name": "next",
                        "type": ""
                    },
                    {
                        "name": "debug",
                        "type": "boolean",
                        "optional": true
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 955,
                            "end": 962,
                            "flags": 0,
                            "escapedText": "current"
                        },
                        "type": "",
                        "tagName": {
                            "pos": 949,
                            "end": 954,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Json 1</p>\n"
                    },
                    {
                        "name": {
                            "pos": 980,
                            "end": 984,
                            "flags": 0,
                            "escapedText": "next"
                        },
                        "type": "",
                        "tagName": {
                            "pos": 974,
                            "end": 979,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Json 2</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1002,
                            "end": 1007,
                            "flags": 0,
                            "escapedText": "debug"
                        },
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "pos": 996,
                            "end": 1001,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p><code>true</code> se deve loggar os JSON</p>\n"
                    }
                ]
            },
            {
                "name": "makeSortParams",
                "file": "projects/w3/src/lib/helpers/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "sort"
                    },
                    {
                        "name": "def"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "sort",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "def",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "w3CheckIsNumeric",
                "file": "projects/w3/src/lib/helpers/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Verifica se é numérico</p>\n",
                "args": [
                    {
                        "name": "v",
                        "type": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1346,
                            "end": 1347,
                            "flags": 0,
                            "escapedText": "v"
                        },
                        "type": "",
                        "tagName": {
                            "pos": 1340,
                            "end": 1345,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "w3IsEmpty",
                "file": "projects/w3/src/lib/helpers/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Verifica se é vazio</p>\n",
                "args": [
                    {
                        "name": "v",
                        "type": "any"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1503,
                            "end": 1504,
                            "flags": 0,
                            "escapedText": "v"
                        },
                        "type": "any",
                        "tagName": {
                            "pos": 1497,
                            "end": 1502,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/w3/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  URL_API: \"\"\n}"
                }
            ],
            "projects/w3/src/lib/apps/auth/auth-abstract.service.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/apps/auth/auth-abstract.service.ts",
                    "type": "",
                    "defaultValue": "momentImported"
                }
            ],
            "projects/w3/src/lib/components/w3-paginator/pt-br-paginator-intl.ts": [
                {
                    "name": "ptBrRangeLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/components/w3-paginator/pt-br-paginator-intl.ts",
                    "type": "",
                    "defaultValue": "(page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) {\n        return `0 de ${length}`;\n    }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} de ${length}`;\n}"
                }
            ],
            "projects/w3/src/lib/index.ts": [
                {
                    "name": "skipAuthorization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/index.ts",
                    "type": "object",
                    "defaultValue": "{headers: {skipAuthorization: '1'}}"
                },
                {
                    "name": "skipToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/index.ts",
                    "type": "object",
                    "defaultValue": "{headers: {skipToast: '1'}}"
                },
                {
                    "name": "skipToastAndAuthorization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/index.ts",
                    "type": "object",
                    "defaultValue": "{headers: {skipToast: '1', skipAuthorization: '1'}}"
                },
                {
                    "name": "W3_MESSAGE_RESPONSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/index.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('W3_MESSAGE_RESPONSE')"
                },
                {
                    "name": "W3ConfigToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/index.ts",
                    "type": "object",
                    "defaultValue": "{\n    closeButton: true,\n    timeOut: 5500,\n    enableHtml: true,\n    positionClass: 'toast-top-right'\n}"
                },
                {
                    "name": "W3Variables",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/index.ts",
                    "type": "object",
                    "defaultValue": "{\n\n    /**\n     * MASKS\n     *\n     * chamar TextMaskModule no módulo a ser usado\n     * exemplo: [textMask]=\"{mask: mask.tel}\"\n     * orgem: https://github.com/text-mask/text-mask\n     */\n    mask: {\n        tel: ['(', /[1-9]/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n        cep: ['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]\n    }\n}"
                }
            ],
            "projects/w3/src/lib/apps/auth/tokens.ts": [
                {
                    "name": "W3_AUTH_SERVICE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/apps/auth/tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('W3_AUTH_SERVICE')"
                },
                {
                    "name": "W3_PROTECTED_FALLBACK_PAGE_URI",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/apps/auth/tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('W3_PROTECTED_FALLBACK_PAGE_URI')"
                },
                {
                    "name": "W3_PUBLIC_FALLBACK_PAGE_URI",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/apps/auth/tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('W3_PUBLIC_FALLBACK_PAGE_URI')"
                }
            ],
            "projects/w3/src/lib/w3.config.ts": [
                {
                    "name": "W3_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/w3.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('w3CustomConfig')"
                },
                {
                    "name": "w3ConfigDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/w3.config.ts",
                    "type": "W3Config",
                    "defaultValue": "{\n    storage: w3StorageByLocalStorage\n}"
                }
            ],
            "projects/w3/src/lib/helpers/rxjs.ts": [
                {
                    "name": "w3IsConfirmed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/helpers/rxjs.ts",
                    "type": "",
                    "defaultValue": "() => {\n    return source => defer(() => {\n\n        return source.pipe(\n            filter((response: W3ConfirmResponse) => response.result === 'OK'),\n            map((response: W3ConfirmResponse) => response.payload)\n        );\n\n    });\n}"
                }
            ],
            "projects/w3/src/lib/apps/storage/models.ts": [
                {
                    "name": "w3StorageByLocalSession",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/apps/storage/models.ts",
                    "type": "W3StorageOption",
                    "defaultValue": "{\n    prefix: 'app',\n    drive: 'SESSION'\n}"
                },
                {
                    "name": "w3StorageByLocalStorage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/w3/src/lib/apps/storage/models.ts",
                    "type": "W3StorageOption",
                    "defaultValue": "{\n    prefix: 'app',\n    drive: 'STORAGE'\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/w3/src/lib/helpers/utils.ts": [
                {
                    "name": "enumToArray",
                    "file": "projects/w3/src/lib/helpers/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Converte Enum para Array</p>\n",
                    "args": [
                        {
                            "name": "_enum",
                            "type": ""
                        }
                    ],
                    "returnType": "EnumItem[]",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 172,
                                "end": 177,
                                "flags": 0,
                                "escapedText": "_enum"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 166,
                                "end": 171,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "enumToArrayWithLabels",
                    "file": "projects/w3/src/lib/helpers/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Converte Enum para Array usado seus labels como valor</p>\n",
                    "args": [
                        {
                            "name": "_enum",
                            "type": ""
                        },
                        {
                            "name": "labels"
                        }
                    ],
                    "returnType": "EnumItem[]",
                    "jsdoctags": [
                        {
                            "name": "_enum",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labels",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "jsonEqual",
                    "file": "projects/w3/src/lib/helpers/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Compara jsons</p>\n",
                    "args": [
                        {
                            "name": "current",
                            "type": ""
                        },
                        {
                            "name": "next",
                            "type": ""
                        },
                        {
                            "name": "debug",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 955,
                                "end": 962,
                                "flags": 0,
                                "escapedText": "current"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 949,
                                "end": 954,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Json 1</p>\n"
                        },
                        {
                            "name": {
                                "pos": 980,
                                "end": 984,
                                "flags": 0,
                                "escapedText": "next"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 974,
                                "end": 979,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Json 2</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1002,
                                "end": 1007,
                                "flags": 0,
                                "escapedText": "debug"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 996,
                                "end": 1001,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p><code>true</code> se deve loggar os JSON</p>\n"
                        }
                    ]
                },
                {
                    "name": "makeSortParams",
                    "file": "projects/w3/src/lib/helpers/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "sort"
                        },
                        {
                            "name": "def"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "def",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "w3CheckIsNumeric",
                    "file": "projects/w3/src/lib/helpers/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Verifica se é numérico</p>\n",
                    "args": [
                        {
                            "name": "v",
                            "type": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1346,
                                "end": 1347,
                                "flags": 0,
                                "escapedText": "v"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1340,
                                "end": 1345,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "w3IsEmpty",
                    "file": "projects/w3/src/lib/helpers/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Verifica se é vazio</p>\n",
                    "args": [
                        {
                            "name": "v",
                            "type": "any"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1503,
                                "end": 1504,
                                "flags": 0,
                                "escapedText": "v"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 1497,
                                "end": 1502,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "projects/w3/src/lib/components/w3-paginator/pt-br-paginator-intl.ts": [
                {
                    "name": "getPtBrPaginatorIntl",
                    "file": "projects/w3/src/lib/components/w3-paginator/pt-br-paginator-intl.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {}
}